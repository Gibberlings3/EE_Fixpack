////////////////////////////////////////////////////////
///	  Bulk reordering of spell effect blocks and
///   extraction of resources into subspells
///
///	 depends on the permute_effects and extract_effects_as_subspell
///	 functions in dw_functions.tph
////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION rearrange_itm_spl
	STR_VAR data_location="%MOD_FOLDER%/data/rearrange"
BEGIN



// find path

	ACTION_IF GAME_IS iwdee BEGIN
		OUTER_SPRINT path "iwd"
	END ELSE
	ACTION_IF GAME_IS bgee BEGIN
		ACTION_IF GAME_INCLUDES sod BEGIN
			OUTER_SPRINT path "sod"
		END ELSE BEGIN
			OUTER_SPRINT path "bg1"
		END
	END ELSE BEGIN
		OUTER_SPRINT path "bg2"
	END
	OUTER_SPRINT path "%data_location%/%path%"

////////////////////////////////////////////////////////////////////////
//bulk subspell extractions
////////////////////////////////////////////////////////////////////////

	ACTION_IF FILE_EXISTS "%path%/item_subspells.txt" BEGIN
		COPY - "%path%/item_subspells.txt" nowhere
			READ_2DA_ENTRIES_NOW item_subspell_entries 4
			FOR (row=1;row<item_subspell_entries;++row) BEGIN
				READ_2DA_ENTRY_FORMER item_subspell_entries row 0 itm
				READ_2DA_ENTRY_FORMER item_subspell_entries row 1 ability
				READ_2DA_ENTRY_FORMER item_subspell_entries row 2 subspell
				READ_2DA_ENTRY_FORMER item_subspell_entries row 3 extract
				INNER_ACTION BEGIN
					LAF extract_effects_as_subspell INT_VAR ability STR_VAR resource="%itm%.itm" subspell extract END
				END
			END
	END

	ACTION_IF FILE_EXISTS "%path%/spell_subspells.txt" BEGIN
		COPY - "%path%/spell_subspells.txt" nowhere
			READ_2DA_ENTRIES_NOW spell_subspell_entries 4
			FOR (row=1;row<spell_subspell_entries;++row) BEGIN
				READ_2DA_ENTRY_FORMER spell_subspell_entries row 0 spl
				READ_2DA_ENTRY_FORMER spell_subspell_entries row 1 keep_spell_levels
				READ_2DA_ENTRY_FORMER spell_subspell_entries row 2 subspell
				READ_2DA_ENTRY_FORMER spell_subspell_entries row 3 extract
				INNER_ACTION BEGIN
					LAF extract_effects_as_subspell INT_VAR keep_spell_levels STR_VAR resource="%spl%.spl" subspell extract END
				END
			END
	END

////////////////////////////////////////////////////////////////////////
// bulk reorderings of effects blocks
//
// do this second so we can reorder subspells generated by earlier code
////////////////////////////////////////////////////////////////////////

	ACTION_IF FILE_EXISTS "%path%/reorderings.txt" BEGIN
		COPY - "%path%/reorderings.txt" nowhere
			READ_2DA_ENTRIES_NOW reordering_entries 3
			FOR (row=1;row<reordering_entries;++row) BEGIN
				READ_2DA_ENTRY_FORMER reordering_entries row 0 resource
				READ_2DA_ENTRY_FORMER reordering_entries row 1 ability
				READ_2DA_ENTRY_FORMER reordering_entries row 2 permutation
				INNER_ACTION BEGIN
					ACTION_IF FILE_EXISTS_IN_GAME "%resource%" BEGIN
						COPY_EXISTING "%resource%" override
							LPF permute_effects INT_VAR ability STR_VAR permutation END
					END ELSE BEGIN
						WARN "immunities_via_324: instructed to reorder effects on %resource% but it doesn't exist"
					END
				END
			END
	END

////////////////////////////////////////////////////////////////////////
// Things complicated enough that we need to do them manually
////////////////////////////////////////////////////////////////////////

// 3 white doves - rearrange so all the death stuff occurs after the damage and visuals

	ACTION_IF GAME_IS iwdee BEGIN

		COPY_EXISTING doves.itm override
		// get array of fx locations
			READ_LONG 0x64 ab_off
			GET_OFFSET_ARRAY2 fx_arr ab_off ITM_V10_HEAD_EFFECTS
			count_death=0
			count_rest=0
			count_mess=0
		// make three arrays of effect contents - one for death effects, one for death messages, one for others
			CLEAR_ARRAY death_fx
			CLEAR_ARRAY mess_fx
			CLEAR_ARRAY rest_fx
			PHP_EACH fx_arr AS fx_ind=>fx_off BEGIN
				READ_ASCII fx_off data (0x30)
				READ_ASCII (fx_off+0x14) eff_file
				PATCH_MATCH "%eff_file%" WITH
				cddovdie BEGIN
					SPRINT $death_fx("%count_death%") "%data%"
					++count_death
				END
				cddovmes cddovme2 BEGIN
					SPRINT $mess_fx("%count_mess%") "%data%"
					++count_mess
				END
				DEFAULT
					SPRINT $rest_fx("%count_rest%") "%data%"
					++count_rest
				END
			END

		// write them back into the item
			count=0
			PATCH_FOR_EACH arr IN rest_fx death_fx mess_fx BEGIN
				PHP_EACH "%arr%" AS ind=>data BEGIN
					offset=$fx_arr("%count%")
					WRITE_ASCII offset "%data%" (0x30)
					++count
				END
			END


	END





END
