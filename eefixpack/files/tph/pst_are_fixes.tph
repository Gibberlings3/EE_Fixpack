// fixing area flags
COPY_EXISTING ~ar0402.are~ ~override~
  // clear bit 1 (Reform Party not allowed)
  // set bit 4 (Player1 can die), bit 7 ("You cannot rest here.")
  WRITE_LONG 0x14 (THIS BAND BNOT BIT1
                        BOR BIT4
                        BOR BIT7)
BUT_ONLY

// fixing offsets
COPY_EXISTING ~ar0501.are~ ~override~
  SET bytes = (LONG_AT 0xac) * 76 // # bytes of animation block
  WRITE_LONG 0xbc (THIS + bytes)  // songs offset
BUT_ONLY

// fixing offsets
COPY_EXISTING ~ar1001.are~ ~override~
              ~ar3017.are~ ~override~
  READ_LONG 0xb0 anim_off
  SET bytes = (LONG_AT 0xac) * 76 // # bytes of animation block

    // offsets: tiled objects, songs, rest encounters, automap notes, projectile traps
  PATCH_FOR_EACH off IN 0xb8 0xbc 0xc0 0xc4 0xcc BEGIN
    PATCH_IF (LONG_AT off >= anim_off) BEGIN
      WRITE_LONG off (THIS + bytes)
    END
  END
BUT_ONLY

// removing bogus data
COPY_EXISTING ~ar13wz.are~ ~override~
  READ_LONG 0xac anim_num
  PATCH_IF (anim_num = 6 AND SOURCE_SIZE = 4016) BEGIN  // sanity check
    // removing duplicate block of 6 animation entries
    READ_LONG 0xb0 anim_off
    SET bytes = 6 * 76  // # bytes of animation block
    DELETE_BYTES (anim_off + bytes) bytes

    // clearing bogus animation flags
    FOR (i = 0; i < anim_num; ++i) BEGIN
      SET off = anim_off + (i * 76)
      WRITE_LONG (off + 0x34) (THIS BAND BNOT BIT13)
    END
  END
BUT_ONLY

// making Pillar of Skulls shadow animation visible
COPY_EXISTING ~ar1001.are~ ~override~
              ~ar3017.are~ ~override~
  READ_LONG 0xac anim_num
  READ_LONG 0xb0 anim_off
  FOR (i = 0; i < anim_num; ++i) BEGIN
    SET off = anim_off + (i * 76)
    READ_ASCII (off + 0x28) resref (8) NULL // animation resref
    PATCH_IF (~%resref%~ STR_EQ ~POSSHAD~) BEGIN
      WRITE_LONG (off + 0x34) (THIS BAND BNOT BIT8) // animation flags
    END
  END
BUT_ONLY

// fixing container items with incorrect number of charges
ACTION_DEFINE_ASSOCIATIVE_ARRAY charged_container_items BEGIN
  // ARE resref, container index, item index, charge index => new charge value
  ~AR0108~, 0, 3, 0 => 0  // RUSTDAG.ITM
  ~AR0701~, 2, 0, 0 => 1  // SILRING.ITM
  ~AR0704~, 8, 2, 0 => 0  // STEAKKNF.ITM
  ~AR1700~, 7, 0, 0 => 1  // COPEAR.ITM
  ~AR1700~, 8, 0, 0 => 1  // COPEAR.ITM
END

ACTION_PHP_EACH charged_container_items AS key => value BEGIN
  OUTER_SPRINT are_resref $key(~0~)
  COPY_EXISTING ~%are_resref%.ARE~ ~override~
    READ_LONG 0x70 ofs_containers
    READ_SHORT 0x74 num_containers
    READ_LONG 0x78 ofs_items
    SET container_offset = ofs_containers + $key(~1~) * 192   // container offset
    READ_LONG (container_offset + 0x40) idx_items
    READ_LONG (container_offset + 0x44) num_items
    SET item_offset = ofs_items + (idx_items + $key(~2~)) * 20  // container item offset
    SET charge_offset = item_offset + 0x0a + $key(~3~) * 2  // absolute offset of item charge
    WRITE_SHORT charge_offset value   // updating item charge value
  BUT_ONLY IF_EXISTS
END
