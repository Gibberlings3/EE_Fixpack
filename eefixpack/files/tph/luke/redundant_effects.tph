/// Slightly refactored version of DavidW's code to remove redundant icons. This version:
/// - takes care of a couple of more redundant effects
/// - tries to be a bit more selective (and careful) when patching

/////////////////////////////////////////////////////////////////
/*

**Opcode 39**
- It can naturally provide the "Sleep/Hopelessness/Nauseated/Unconscious" portrait icons

**Opcode 213**
- It can naturally provide the "Maze" portrait icon

**Opcode 74**
- It can naturally provide the "Blind" portrait icon
- It naturally imposes a -4 penalty to THAC0

**Opcode 45**
- It can naturally provide the "Stun" portrait icon

**Opcode 175**
- It can naturally provide the "Held" portrait icon
- It can naturally display the "Held" feedback string

**Opcode 25**
- It can naturally provide the "Poisoned" portrait icon
- It automatically provides a feedback string (it's defined in "efftext.2da")

**Opcode 98**
- It can naturally provide the "Regeneration" / "Regenerating" portrait icon

**Opcode 16 / 317**
- They can naturally provide the "Haste" / "Improved Haste" portrait icon

**Opcode 40**
- It can naturally provide the "Slow" portrait icon

**Opcode 78**
- It can naturally provide the "Diseased" portrait icon

**Opcode 5**
- It can naturally provide the "Charm" / "Dire Charm" / "Domination" portrait icon
- It can naturally display the "Charmed" / "Dire charmed" feedback strings

**Opcode 157**
- It can naturally paralyze the targeted creature (there is no need to apply a separate op109 effect)

*/
//////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION "remove_redundant_effects"
INT_VAR
	"write" = 0
STR_VAR
	"data_location" = "%MOD_FOLDER%/data/redundant_effects"
BEGIN
	// find path
	ACTION_MATCH 1 WITH
		(GAME_IS ~bgee~) WHEN (GAME_INCLUDES ~sod~) BEGIN
			OUTER_TEXT_SPRINT ~path~ "sod"
		END
		(GAME_IS ~bgee~) BEGIN
			OUTER_TEXT_SPRINT ~path~ "bg1"
		END
		(GAME_IS ~bg2ee eet~) BEGIN
			OUTER_TEXT_SPRINT ~path~ "bg2"
		END
		(GAME_IS ~iwdee~) BEGIN
			OUTER_TEXT_SPRINT ~path~ "iwd"
		END
		DEFAULT
			FAIL "Game not supported"
	END
	OUTER_TEXT_SPRINT ~path~ "%data_location%/%path%"
	// main
	ACTION_IF "%write%" BEGIN
		COPY_EXISTING_REGEXP "^.+\.\(itm\|spl\)$" "override"
			LPF "redundant_effect_patch" END
		BUT_ONLY
		COPY + "weidu_external/data/%MOD_FOLDER%/redundant_effects.txt" "%path%.txt"
	END ELSE BEGIN
		COPY - "%path%.txt" "override"
			COUNT_2DA_COLS "cols"
			READ_2DA_ENTRIES_NOW "filelist" "%cols%"
			FOR ("row" = 0 ; "%row%" < "%filelist%" ; ++"row") BEGIN
				READ_2DA_ENTRY_FORMER "filelist" "%row%" 0 "file"
				INNER_ACTION BEGIN
					COPY_EXISTING "%file%" "override"
						LPF "redundant_effect_patch" END
					BUT_ONLY_IF_IT_CHANGES
				END
			END
		BUT_ONLY_IF_IT_CHANGES
	END
END

///////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION "redundant_effect_patch"
BEGIN
	SET "found" = 0
	// get the array
	PATCH_MATCH "%DEST_EXT%" WITH
		"ITM" BEGIN
			GET_OFFSET_ARRAY "fx_array" ITM_V10_GEN_EFFECTS
		END
		"SPL" BEGIN
			GET_OFFSET_ARRAY "fx_array" SPL_V10_GEN_EFFECTS
		END
		DEFAULT
			PATCH_FAIL "redundant_effect_patch: should not happen => ~%DEST_FILE%~"
	END
	// check global effect(s)
	LPF "redundant_effect_helper" RET "found_here" END
	SET "found" = "%found_here%"
	// check abilities
	PATCH_MATCH "%DEST_EXT%" WITH
		"ITM" BEGIN
			GET_OFFSET_ARRAY "ab_array" ITM_V10_HEADERS
		END
		"SPL" BEGIN
			GET_OFFSET_ARRAY "ab_array" SPL_V10_HEADERS
		END
		DEFAULT
			PATCH_FAIL "redundant_effect_patch: should not happen => ~%DEST_FILE%~"
	END
	PHP_EACH "ab_array" AS "ab_ind" => "ab_off" BEGIN
		GET_OFFSET_ARRAY2 "fx_array" "%ab_off%" SPL_V10_HEAD_EFFECTS // NB, same for spl and itm
		LPF "redundant_effect_helper" RET "found_here" END
		SET "found" = "%found%" OR "%found_here%"
	END
	/// do the actual deletion
	PATCH_IF "%found%" BEGIN 
		LPF "DELETE_EFFECT" INT_VAR "match_opcode" = 999 END
		PATCH_IF "%write%" BEGIN
			TO_UPPER "SOURCE_FILE"
			LPF "fp_log_this" INT_VAR "repeat" = 0 STR_VAR "file" = "redundant_effects.txt" "input" = "~%SOURCE_FILE%~" END
		END
	END
END

///////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION "redundant_effect_helper"
RET
	"found_here"
BEGIN
	// Initialize
	SET "found_here" = 0
	// Collect opcodes
	LPF "redundant_effect_helper2" RET_ARRAY "fx_data" END
	// check redundant effects
	PHP_EACH "fx_data" AS "fx_attribute" => "" BEGIN
		PHP_EACH "fx_array" AS "fx_ind" => "fx_off" BEGIN
			PATCH_MATCH SHORT_AT "%fx_off%" WITH
				54 WHEN (SLONG_AT ("%fx_off%" + 0x4) == "-4") AND (SLONG_AT ("%fx_off%" + 0x8) == 0) AND ("%fx_attribute_0%" == 74) BEGIN
					PATCH_IF (BYTE_AT ("%fx_off%" + 0x2) == "%fx_attribute_1%") BEGIN
						PATCH_IF (BYTE_AT ("%fx_off%" + 0x12) == "%fx_attribute_2%") BEGIN
							PATCH_IF (BYTE_AT ("%fx_off%" + 0x13) == "%fx_attribute_3%") BEGIN
								PATCH_IF (LONG_AT ("%fx_off%" + 0x1C) == "%fx_attribute_4%") BEGIN
									PATCH_IF (LONG_AT ("%fx_off%" + 0x20) == "%fx_attribute_5%") BEGIN
										PATCH_IF (LONG_AT ("%fx_off%" + 0x24) == "%fx_attribute_6%") BEGIN
											PATCH_IF (SLONG_AT ("%fx_off%" + 0x28) == "%fx_attribute_7%") BEGIN
												WRITE_SHORT "%fx_off%" 999
												SET "found_here" = 1
											END
										END
									END
								END
							END
						END
					END
				END
				109 WHEN ("%fx_attribute_0%" == 157) BEGIN
					PATCH_IF (BYTE_AT ("%fx_off%" + 0x2) == "%fx_attribute_1%") BEGIN
						PATCH_IF (BYTE_AT ("%fx_off%" + 0x12) == "%fx_attribute_2%") BEGIN
							PATCH_IF (BYTE_AT ("%fx_off%" + 0x13) == "%fx_attribute_3%") BEGIN
								PATCH_IF (LONG_AT ("%fx_off%" + 0x1C) == "%fx_attribute_4%") BEGIN
									PATCH_IF (LONG_AT ("%fx_off%" + 0x20) == "%fx_attribute_5%") BEGIN
										PATCH_IF (LONG_AT ("%fx_off%" + 0x24) == "%fx_attribute_6%") BEGIN
											PATCH_IF (SLONG_AT ("%fx_off%" + 0x28) == "%fx_attribute_7%") BEGIN
												WRITE_SHORT "%fx_off%" 999
												SET "found_here" = 1
											END
										END
									END
								END
							END
						END
					END
				END
				139 BEGIN
					LPF "GT_GET_STRING" INT_VAR "strref" = SLONG_AT ("%fx_off%" + 0x4) RET "string" END
					PATCH_IF (("%string%" STRING_MATCHES_REGEXP "%fx_attribute_9%") == 0) BEGIN
						PATCH_IF (BYTE_AT ("%fx_off%" + 0x2) == "%fx_attribute_1%") BEGIN
							PATCH_IF (BYTE_AT ("%fx_off%" + 0x12) == "%fx_attribute_2%") BEGIN
								PATCH_IF (BYTE_AT ("%fx_off%" + 0x13) == "%fx_attribute_3%") BEGIN
									PATCH_IF (LONG_AT ("%fx_off%" + 0x1C) == "%fx_attribute_4%") BEGIN
										PATCH_IF (LONG_AT ("%fx_off%" + 0x20) == "%fx_attribute_5%") BEGIN
											PATCH_IF (LONG_AT ("%fx_off%" + 0x24) == "%fx_attribute_6%") BEGIN
												PATCH_IF (SLONG_AT ("%fx_off%" + 0x28) == "%fx_attribute_7%") BEGIN
													WRITE_SHORT "%fx_off%" 999
													SET "found_here" = 1
												END
											END
										END
									END
								END
							END
						END
					END
				END
				142 BEGIN
					READ_SLONG ("%fx_off%" + 0x8) "icon"
					PATCH_IF (("%icon%" STRING_MATCHES_REGEXP "%fx_attribute_8%") == 0) BEGIN
						PATCH_IF (BYTE_AT ("%fx_off%" + 0x2) == "%fx_attribute_1%") BEGIN
							PATCH_IF (BYTE_AT ("%fx_off%" + 0x12) == "%fx_attribute_2%") BEGIN
								PATCH_IF (BYTE_AT ("%fx_off%" + 0x13) == "%fx_attribute_3%") BEGIN
									PATCH_IF (LONG_AT ("%fx_off%" + 0x1C) == "%fx_attribute_4%") BEGIN
										PATCH_IF (LONG_AT ("%fx_off%" + 0x20) == "%fx_attribute_5%") BEGIN
											PATCH_IF (LONG_AT ("%fx_off%" + 0x24) == "%fx_attribute_6%") BEGIN
												PATCH_IF (SLONG_AT ("%fx_off%" + 0x28) == "%fx_attribute_7%") BEGIN
													WRITE_SHORT "%fx_off%" 999
													SET "found_here" = 1
													PATCH_MATCH "%icon%" WITH
														7 56 87 14 44 126 130 BEGIN
															PATCH_IF ("%fx_ind%" > "%fx_attribute_10%") BEGIN
																WRITE_LONG ("%fx_off%" - ("%fx_ind%" - "%fx_attribute_10%") * 0x30 + 0x2C) "%icon%"
															END ELSE BEGIN
																WRITE_LONG ("%fx_off%" + ("%fx_ind%" - "%fx_attribute_10%") * 0x30 + 0x2C) "%icon%"
															END
														END
														41 WHEN ("%fx_attribute_0%" == 78) AND ("%fx_attribute_11%" == 10) BEGIN // Disease type: Slow
															PATCH_IF ("%fx_ind%" > "%fx_attribute_10%") BEGIN
																WRITE_LONG ("%fx_off%" - ("%fx_ind%" - "%fx_attribute_10%") * 0x30 + 0x2C) "%icon%"
															END ELSE BEGIN
																WRITE_LONG ("%fx_off%" + ("%fx_ind%" - "%fx_attribute_10%") * 0x30 + 0x2C) "%icon%"
															END
														END
														DEFAULT
													END
												END
											END
										END
									END
								END
							END
						END
					END
				END
				DEFAULT
			END
		END
	END
END

DEFINE_PATCH_FUNCTION "redundant_effect_helper2"
RET_ARRAY
	"fx_data"
BEGIN
	PHP_EACH "fx_array" AS "fx_ind" => "fx_off" BEGIN
		PATCH_MATCH SHORT_AT "%fx_off%" WITH
			5 BEGIN // Charm creature
				READ_SLONG ("%fx_off%" + 0x8) "fx_parameter2"
				PATCH_IF ("%fx_parameter2%" STRING_MATCHES_REGEXP "^\(4\|1004\)$") BEGIN
					// Save current values
					READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
					READ_BYTE ("%fx_off%" + 0x2) "fx_target"
					READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
					READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
					READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
					READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
					READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
					READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
					TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "^\(0\|1\|43\)$" "^\(Charmed\|Dire charmed\)$" "%fx_ind%") "irrelevant"
				END
			END
			16 317 BEGIN // Haste
				READ_BYTE ("%fx_off%" + 0xC) "fx_timing"
				PATCH_IF ("%fx_timing%" STRING_MATCHES_REGEXP "^\(1\|4\|7\)$") BEGIN
					// Save current values
					READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
					READ_BYTE ("%fx_off%" + 0x2) "fx_target"
					READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
					READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
					READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
					READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
					READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
					READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
					TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "^\(38\|110\)$" "*" "%fx_ind%") "irrelevant"
				END
			END
			25 BEGIN // Poison
				// Save current values
				READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
				READ_BYTE ("%fx_off%" + 0x2) "fx_target"
				READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
				READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
				READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
				READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
				READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
				READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
				TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "6" "^\(Poison\|Poisoned\)$" "%fx_ind%") "irrelevant"
			END
			39 BEGIN // Sleep
				READ_BYTE ("%fx_off%" + 0xC) "fx_timing"
				PATCH_IF ("%fx_timing%" STRING_MATCHES_REGEXP "^\(1\|4\|7\)$") BEGIN
					// Save current values
					READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
					READ_BYTE ("%fx_off%" + 0x2) "fx_target"
					READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
					READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
					READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
					READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
					READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
					READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
					TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "^\(14\|44\|126\|130\)$" "*" "%fx_ind%") "irrelevant"
				END
			END
			40 BEGIN // Slow
				READ_BYTE ("%fx_off%" + 0xC) "fx_timing"
				PATCH_IF ("%fx_timing%" STRING_MATCHES_REGEXP "^\(1\|4\|7\)$") BEGIN
					// Save current values
					READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
					READ_BYTE ("%fx_off%" + 0x2) "fx_target"
					READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
					READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
					READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
					READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
					READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
					READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
					TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "41" "*" "%fx_ind%") "irrelevant"
				END
			END
			45 BEGIN // Stun
				READ_BYTE ("%fx_off%" + 0xC) "fx_timing"
				PATCH_IF ("%fx_timing%" STRING_MATCHES_REGEXP "^\(1\|4\|7\)$") BEGIN
					// Save current values
					READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
					READ_BYTE ("%fx_off%" + 0x2) "fx_target"
					READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
					READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
					READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
					READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
					READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
					READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
					TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "55" "*" "%fx_ind%") "irrelevant"
				END
			END
			74 BEGIN // Blindness
				READ_BYTE ("%fx_off%" + 0xC) "fx_timing"
				PATCH_IF ("%fx_timing%" STRING_MATCHES_REGEXP "^\(1\|4\|7\)$") BEGIN
					// Save current values
					READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
					READ_BYTE ("%fx_off%" + 0x2) "fx_target"
					READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
					READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
					READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
					READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
					READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
					READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
					TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "8" "*" "%fx_ind%") "irrelevant"
				END
			END
			78 BEGIN // Disease
				// Save current values
				READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
				READ_BYTE ("%fx_off%" + 0x2) "fx_target"
				READ_SLONG ("%fx_off%" + 0x8) "fx_parameter2"
				READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
				READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
				READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
				READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
				READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
				READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
				TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "^\(7\|41\)$" "*" "%fx_ind%" "%fx_parameter2%") "irrelevant"
			END
			98 BEGIN // Regeneration
				// Save current values
				READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
				READ_BYTE ("%fx_off%" + 0x2) "fx_target"
				READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
				READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
				READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
				READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
				READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
				READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
				TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "^\(56\|87\)$" "*" "%fx_ind%") "irrelevant"
			END
			175 BEGIN // Hold creature
				// Save current values
				READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
				READ_BYTE ("%fx_off%" + 0x2) "fx_target"
				READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
				READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
				READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
				READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
				READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
				READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
				TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "13" "Held" "%fx_ind%") "irrelevant"
			END
			213 BEGIN // Maze
				// Save current values
				READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
				READ_BYTE ("%fx_off%" + 0x2) "fx_target"
				READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
				READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
				READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
				READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
				READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
				READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
				TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "78" "*" "%fx_ind%") "irrelevant"
			END
			157 BEGIN // Web overlay
				// Save current values
				READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
				READ_BYTE ("%fx_off%" + 0x2) "fx_target"
				READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
				READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
				READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
				READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
				READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
				READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
				TEXT_SPRINT $"fx_data"("%fx_opcode%" "%fx_target%" "%fx_probability1%" "%fx_probability2%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "*" "*" "%fx_ind%") "irrelevant"
			END
			DEFAULT
		END
	END
END