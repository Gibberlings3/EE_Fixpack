// since invis is usually broken before its (exceptionally long) duration, the expiry sound
// is often played even though the invis is long gone. so we push it out to an external
// spell and only apply if the creature is actually still invisible

// also prevent spell stacking, and add ane xpiry sound to regular invis (spwi206)

COPY ~eefixpack/files/spl/cdinvexp.spl~ ~override~ // plays eff_m10

COPY_EXISTING ~bdnighte.spl~ ~override~ // invis via the night's gift bdleat07.itm [sod]
              ~ohbwi405.spl~ ~override~ // improved invisibility
              ~spin544.spl~  ~override~ // psionic superior invis
              ~spin687.spl~  ~override~ // create shadows
              ~spwi206.spl~  ~override~ // invis
              ~spwi307.spl~  ~override~ // invis 10'
              ~spwi405.spl~  ~override~ // improved invis
              ~spwi505.spl~  ~override~ // shadow door
              ~spwi721.spl~  ~override~ // mass invis
  READ_LONG  0x64 abil_off
  READ_SHORT 0x68 abil_num
  READ_LONG  0x6a fx_off
  SET fx_delta = 0
  PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_CASE "spwi206" = 0) BEGIN SET add326 = 1 END ELSE BEGIN SET add326 = 0 END // add expiry sound for regular invis
  FOR (index = 0 ; index < abil_num ; ++index) BEGIN
    WRITE_SHORT (abil_off + 0x20 + (index * 0x28)) THIS + fx_delta
    READ_SHORT  (abil_off + 0x1e + (index * 0x28)) abil_fx_num
    READ_SHORT  (abil_off + 0x20 + (index * 0x28)) abil_fx_idx
    SET add321 = 0
    FOR (index2 = 0 ; index2 < abil_fx_num ; ++index2) BEGIN
      READ_SHORT (fx_off + 0x00 + (0x30 * (index2 + abil_fx_idx))) opcode
      READ_BYTE  (fx_off + 0x0c + (0x30 * (index2 + abil_fx_idx))) timing
      READ_ASCII (fx_off + 0x14 + (0x30 * (index2 + abil_fx_idx))) resref
      PATCH_IF ((opcode = 20) AND (add321 = 0)) BEGIN
        READ_ASCII   (fx_off + 0x00 + (0x30 * (index2 + abil_fx_idx))) effect (48)
        PATCH_IF add326 BEGIN
          INSERT_BYTES (fx_off + 0x00 + (0x30 * abil_fx_idx)) 0x30
          WRITE_ASCIIE (fx_off + 0x00 + (0x30 * abil_fx_idx)) ~%effect%~ #48
          WRITE_SHORT  (fx_off + 0x00 + (0x30 * abil_fx_idx)) 326 // opcode
          WRITE_LONG   (fx_off + 0x08 + (0x30 * abil_fx_idx)) 142 // p2
          WRITE_BYTE   (fx_off + 0x0c + (0x30 * abil_fx_idx)) 4 // timing
          WRITE_LONG   (fx_off + 0x0e + (0x30 * abil_fx_idx)) (THIS - 3) // duration
          WRITE_ASCIIE (fx_off + 0x14 + (0x30 * abil_fx_idx)) ~cdinvexp~ #8
        END
        INSERT_BYTES (fx_off + 0x00 + (0x30 * abil_fx_idx)) 0x30 // 321 to remove self
        WRITE_ASCIIE (fx_off + 0x00 + (0x30 * abil_fx_idx)) ~%effect%~ #48
        WRITE_SHORT  (fx_off + 0x00 + (0x30 * abil_fx_idx)) 321 // opcode
        WRITE_LONG   (fx_off + 0x08 + (0x30 * abil_fx_idx)) 0 // p2
        WRITE_BYTE   (fx_off + 0x0c + (0x30 * abil_fx_idx)) 1 // timing
        WRITE_LONG   (fx_off + 0x0e + (0x30 * abil_fx_idx)) 0 // duration
        WRITE_ASCIIE (fx_off + 0x14 + (0x30 * abil_fx_idx)) ~%SOURCE_RES%~ #8
        SET add321 += (1 + add326)
        SET abil_fx_num += (1 + add326)
        SET index2 += (1 + add326)
        SET fx_delta += (1 + add326)
      END ELSE
      PATCH_IF ((opcode = 174) AND (timing = 4) AND
                ("%resref%" STRING_COMPARE_CASE "eff_m10" = 0)) BEGIN // expiry sound
        WRITE_SHORT (fx_off + 0x00 + (0x30 * (index2 + abil_fx_idx))) 326        // apply effect list
        WRITE_LONG  (fx_off + 0x08 + (0x30 * (index2 + abil_fx_idx))) 142        // if state invis or improved invis
        WRITE_LONG  (fx_off + 0x0e + (0x30 * (index2 + abil_fx_idx))) (THIS - 3) // three seconds before expiry
        WRITE_ASCII (fx_off + 0x14 + (0x30 * (index2 + abil_fx_idx))) cdinvexp   // expiry sound spell
      END
    END
    WRITE_SHORT (abil_off + 0x1e + (index * 0x28)) abil_fx_num
  END
  BUT_ONLY IF_EXISTS
