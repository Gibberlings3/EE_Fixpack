DEFINE_PATCH_FUNCTION "COUNT_V10_HEAD_EFFECTS"
STR_VAR
  "opcode" = "-1" // regexp allowed (if needed)
  "parameter2" = "same" // regexp allowed (if needed)
  "timing_exclude" = "none" // regexp allowed (if needed)
  "resource" = "same" // regexp allowed (if needed)
RET
  "count"
BEGIN
  // Initialize
  SET "count" = 0
  // Main
  GET_OFFSET_ARRAY2 "fx_array" "%ab_off%" 0x6a 4 0x1e 2 0x20 2 0x30
  PHP_EACH "fx_array" AS "_" => "fx_off" BEGIN
    PATCH_MATCH (SHORT_AT "%fx_off%") WITH
      "%opcode%" BEGIN
        READ_SLONG ("%fx_off%" + 0x8) "p2"
        READ_BYTE ("%fx_off%" + 0xC) "tmg"
        PATCH_IF ("%parameter2%" STRING_EQUAL_CASE "same") OR (IS_AN_INT "parameter2" AND "%p2%" == "%parameter2%") OR (("%p2%" STRING_MATCHES_REGEXP "%parameter2%") == 0) BEGIN
          PATCH_IF ("%timing_exclude%" STRING_EQUAL_CASE "none") OR (IS_AN_INT "timing_exclude" AND "%tmg%" != "%timing_exclude%") OR ("%tmg%" STRING_MATCHES_REGEXP "%timing_exclude%") BEGIN
            READ_ASCII ("%fx_off%" + 0x14) "resref"
            PATCH_IF ("%resource%" STRING_EQUAL_CASE "same") OR (("%resref%" STRING_MATCHES_REGEXP "%resource%") == 0) BEGIN
              SET "count" += 1
            END
          END
        END
      END
      DEFAULT
    END
  END
END

DEFINE_PATCH_FUNCTION "GET_V10_HEAD_EFFECTS"
RET_ARRAY
  "v10_head_effects"
BEGIN
  // Initialize
  PATCH_CLEAR_ARRAY "v10_head_effects"
  PATCH_MATCH "%DEST_EXT%" WITH
    "ITM" BEGIN
        GET_OFFSET_ARRAY "ab_array" ITM_V10_HEADERS
    END
    "SPL" BEGIN
        GET_OFFSET_ARRAY "ab_array" SPL_V10_HEADERS
    END
    DEFAULT
        PATCH_FAIL "GET_V10_HEAD_EFFECTS: should not happen => ~%DEST_FILE%~"
  END
  // Main
  PHP_EACH "ab_array" AS "ab_ind" => "ab_off" BEGIN
    GET_OFFSET_ARRAY2 "fx_array" "%ab_off%" ITM_V10_HEAD_EFFECTS // NB, same for spl and itm
    PHP_EACH "fx_array" AS "fx_ind" => "fx_off" BEGIN
      // Save current values
      READ_SHORT ("%fx_off%" + 0x0) "fx_opcode"
      READ_BYTE ("%fx_off%" + 0x2) "fx_target"
      READ_BYTE ("%fx_off%" + 0x3) "fx_power"
      READ_SLONG ("%fx_off%" + 0x4) "fx_parameter1"
      READ_SLONG ("%fx_off%" + 0x8) "fx_parameter2"
      READ_BYTE ("%fx_off%" + 0xC) "fx_timing"
      READ_BYTE ("%fx_off%" + 0xD) "fx_resist_dispel"
      READ_LONG ("%fx_off%" + 0xE) "fx_duration"
      READ_BYTE ("%fx_off%" + 0x12) "fx_probability1"
      READ_BYTE ("%fx_off%" + 0x13) "fx_probability2"
      READ_ASCII ("%fx_off%" + 0x14) "fx_resref"
      READ_LONG ("%fx_off%" + 0x1C) "fx_max_level"
      READ_LONG ("%fx_off%" + 0x20) "fx_min_level"
      READ_LONG ("%fx_off%" + 0x24) "fx_savetype"
      READ_SLONG ("%fx_off%" + 0x28) "fx_savebonus"
      READ_SLONG ("%fx_off%" + 0x2C) "fx_special"
      TEXT_SPRINT $"v10_head_effects"("%fx_opcode%" "%fx_target%" "%fx_power%" "%fx_parameter1%" "%fx_parameter2%" "%fx_timing%" "%fx_resist_dispel%" "%fx_duration%" "%fx_probability1%" "%fx_probability2%" "%fx_resref%" "%fx_max_level%" "%fx_min_level%" "%fx_savetype%" "%fx_savebonus%" "%fx_special%" "%fx_ind%" "%ab_ind%") "irrelevant"
    END
  END
END

DEFINE_PATCH_FUNCTION "COUNT_V10_GEN_EFFECTS"
STR_VAR
  "opcode" = "-1" // regexp allowed (if needed)
  "parameter2" = "same" // regexp allowed (if needed)
  "timing" = "same" // regexp allowed (if needed)
  "resource" = "same" // regexp allowed (if needed)
RET
  "count"
BEGIN
  // Initialize
  SET "count" = 0
  // Main
  GET_OFFSET_ARRAY "fx_array" 0x6a 4 0x70 2 0x6e 2 0x30
  PHP_EACH "fx_array" AS "_" => "fx_off" BEGIN
    PATCH_MATCH (SHORT_AT "%fx_off%") WITH
      "%opcode%" BEGIN
        READ_SLONG ("%fx_off%" + 0x8) "p2"
        READ_BYTE ("%fx_off%" + 0xC) "tmg"
        PATCH_IF ("%parameter2%" STRING_EQUAL_CASE "same") OR (IS_AN_INT "parameter2" AND "%p2%" == "%parameter2%") OR (("%p2%" STRING_MATCHES_REGEXP "%parameter2%") == 0) BEGIN
          PATCH_IF ("%timing%" STRING_EQUAL_CASE "same") OR (IS_AN_INT "timing" AND "%tmg%" == "%timing%") OR (("%tmg%" STRING_MATCHES_REGEXP "%timing%") == 0) BEGIN
            READ_ASCII ("%fx_off%" + 0x14) "resref"
            PATCH_IF ("%resource%" STRING_EQUAL_CASE "same") OR (("%resref%" STRING_MATCHES_REGEXP "%resource%") == 0) BEGIN
              SET "count" += 1
            END
          END
        END
      END
      DEFAULT
    END
  END
END

///////////////////////////////////////////////////////////////////////////////////////////////////
// A patch function that sorts IDS table entries numerically in ascending order.
// Notation of numeric values (decimal/hexadecimal) is preserved.
// Applies a stable sort which preserves relative order of duplicate IDS entries.
// Entries are also cleaned up by removing excessive whitespace.
///////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_PATCH_FUNCTION sort_ids
BEGIN
  // detecting newline type (windows or unix)
  PATCH_IF (INDEX_BUFFER(~%WNL%~) >= 0) BEGIN
    SPRINT nl ~%WNL%~
  END ELSE BEGIN
    SPRINT nl ~%LNL%~
  END

  // parsing table entries
  SET headers = 0
  SET unparsed = 0  // some ids files contain invalid content
  SPRINT entry_regex ~^\(\(-?[0-9]+\)\|\(-?0x[0-9a-f]+\)\)[ %TAB%]+\(.+\)~ // group 1: value; group 4: symbol
  FOR (pos1 = 0 pos2 = 0 row = 0; pos1 >= 0 && pos2 >= 0; row += 1) BEGIN
    SET pos2 = INDEX_BUFFER(~[%WNL%]~ pos1)
    // needed if last line doesn't end with a newline
    SET pos2 = (pos2 < 0) ? BUFFER_LENGTH : pos2
    PATCH_IF (pos2 >= pos1) BEGIN
      READ_ASCII pos1 line (pos2 - pos1)

      // trimming whitespace
      INNER_PATCH_SAVE line ~%line%~ BEGIN REPLACE_TEXTUALLY ~^[ %TAB%]+~ ~~ REPLACE_TEXTUALLY ~[ %TAB%]+$~ ~~ END

      SET is_entry = (~%line%~ STRING_MATCHES_REGEXP ~%entry_regex%~ == 0)
      SET is_header = (row < 2 && NOT is_entry)

      PATCH_IF (is_header) BEGIN
        // processing table header
        SPRINT $headers(~%headers%~) ~%line%~
        SET headers += 1
      END ELSE PATCH_IF (is_entry) BEGIN
        // processing table entry
        INNER_PATCH_SAVE token1 ~%line%~ BEGIN REPLACE_TEXTUALLY ~%entry_regex%~ ~\1~ END
        INNER_PATCH_SAVE token2 ~%line%~ BEGIN REPLACE_TEXTUALLY ~%entry_regex%~ ~\4~ END
        SET signed = (~%token1%~ STRING_MATCHES_REGEXP ~^-.*~ == 0)
        PATCH_IF (IS_AN_INT ~token1~) BEGIN
          SET value = token1
          SET is_hex = (~%token1%~ STRING_MATCHES_REGEXP ~-?0x.+~ == 0)
          SET digits = is_hex ? STRING_LENGTH ~%token1%~ - 2 : 0
          SET digits = (is_hex && signed) ? digits - 1 : digits
          SET sym_count = VARIABLE_IS_SET $ids(~%value%~ ~count~) ? $ids(~%value%~ ~count~) : 0
          SPRINT $ids(~%value%~ ~%sym_count%~) ~%token2%~
          SET $ids(~%value%~ ~hex~) = is_hex
          SET $ids(~%value%~ ~digits~) = digits
          SET $ids(~%value%~ ~count~) = sym_count + 1

          // hex notation is needed to prevent overflow of big integers
          LPF get_formatted_hex INT_VAR value digits = 8 RET result END
          PATCH_IF (signed) BEGIN
            SPRINT result ~-%result%~
          END
          // only array index is relevant
          SET $ref(~%result%~) = 1
        END
      END ELSE PATCH_IF (NOT ~%line%~ STR_EQ ~~) BEGIN
        // preserve unparsed data
        SPRINT $unparsed(~%unparsed%~) ~%line%~
        SET unparsed += 1
      END

      SET pos1 = INDEX_BUFFER(~[^%WNL%]~ pos2)
    END
  END

  // discarding old content
  SET ofs = 0
  DELETE_BYTES ofs BUFFER_LENGTH

  // writing sorted entries
  // headers
  FOR (i = 0; i < headers; ++i) BEGIN
    SPRINT line $headers(~%i%~)
    SPRINT line ~%line%%nl%~
    SET line_len = STRING_LENGTH ~%line%~
    INSERT_BYTES ofs line_len
    WRITE_ASCIIE ofs ~%line%~ (line_len)
    SET ofs += line_len
  END

  // Sorting indices in hex notation is better done lexicographically to prevent sorting errors because of overflow.
  SORT_ARRAY_INDICES ~ref~ LEXICOGRAPHICALLY

  // table entries
  PHP_EACH ref AS index => _ BEGIN
    // removing sign if needed
    INNER_PATCH_SAVE index ~%index%~ BEGIN
      READ_BYTE 0 sign
      PATCH_IF (sign == 45) BEGIN
        DELETE_BYTES 0 1
      END
    END

    SET value = index
    SET count = $ids(~%value%~ ~count~)
    SET is_hex = $ids(~%value%~ ~hex~)
    SET digits = $ids(~%value%~ ~digits~)

    PATCH_IF (is_hex) BEGIN
      LPF get_formatted_hex INT_VAR value digits RET first = result END
    END ELSE BEGIN
      SET first = value
    END

    FOR (i = 0; i < count; ++i) BEGIN
      SPRINT second $ids(~%value%~ ~%i%~)
      SPRINT line ~%first% %second%%nl%~
      SET line_len = STRING_LENGTH ~%line%~
      INSERT_BYTES ofs line_len
      WRITE_ASCIIE ofs ~%line%~ (line_len)
      SET ofs += line_len
    END
  END

  // unparsed data
  FOR (i = 0; i < unparsed; ++i) BEGIN
    SPRINT line $unparsed(~%i%~)
    SPRINT line ~%line%%nl%~
    SET line_len = STRING_LENGTH ~%line%~
    INSERT_BYTES ofs line_len
    WRITE_ASCIIE ofs ~%line%~ (line_len)
    SET ofs += line_len
  END
END

///////////////////////////////////////////////////////////////////////////////////////////////////
// Converts a number from decimal notation into hexadecimal notation with "0x" prefix
// and a minimum number of digits.
///////////////////////////////////////////////////////////////////////////////////////////////////
DEFINE_PATCH_FUNCTION get_formatted_hex
INT_VAR
  value    = 0  // numeric value to convert into hexadecimal representation
  digits   = 0  // minimum number of digits
  to_upper = 1  // whether extended digits (a..f) are printed in capital letters
RET
  result        // resulting hexadecimal representation of "value"
BEGIN
  SPRINTF result "%x" (value)
  PATCH_IF (to_upper) BEGIN
    TO_UPPER ~result~
  END
  SET result_len = STRING_LENGTH ~%result%~
  SET digits = digits + 2 - result_len
  INNER_PATCH_SAVE result ~%result%~ BEGIN
    WRITE_ASCII 0 ~0x~ (2)  // prefix in lowercase
    FOR (i = 0; i < digits; ++i) BEGIN
      INSERT_BYTES 2 1
      WRITE_BYTE 2 48 // ASCII "0"
    END
  END
END

//////////////////////////////////////////////////////////
/////// ADD_SPLPROT_ENTRY (borrowed from Argent77)
//////////////////////////////////////////////////////////

/*
** Adds a new entry to SPLPROT.2DA and returns its index. If an identical entry already exists it will return the index of that entry instead.
** INT_VAR stat     A code from STATS.IDS or an extended stat code starting at 0x100 (256).
** STR_VAR value    Either a numeric value that is evaluated by "stat", or a default value "*" for specific stats.
**                  (Note: "-1" indicates a user-defined value.)
** STR_VAR relation Specifies how to evaluate the value.
**                  (Note: Not all extended stats require a relation code. Use "*" in this case.)
** RET index        Entry number that can be used to refer to this operation in various effect opcodes.
**                  Returns -1 on error.
*/

DEFINE_DIMORPHIC_FUNCTION "ADD_SPLPROT_ENTRY"
INT_VAR
  "stat"      = "-1"
STR_VAR
  "value"     = "*"
  "relation"  = "*"
  "label"     = ""
RET
  "index"
BEGIN
  // Initialize
  OUTER_SET "index" = "-1"
  // Main
  ACTION_IF ("%stat%" >= 0) BEGIN
    OUTER_PATCH "" BEGIN
      SPRINTF "valueHex" "%x" ("%stat%")
    END
    //
    ACTION_IF (~%value%~ STRING_EQUAL ~~) BEGIN
      OUTER_TEXT_SPRINT "value" ~*~
    END
    ACTION_IF (~%relation%~ STRING_EQUAL ~~) BEGIN
      OUTER_TEXT_SPRINT "relation" ~*~
    END
    // Add the specified entry or return its index if already present
    COPY_EXISTING ~splprot.2da~ ~override~
      READ_2DA_ENTRIES_NOW "read_splprot" 4
      // Search for identical entries
      FOR ("idx" = 0; "%idx%" < "%read_splprot%"; "idx" += 1) BEGIN
        READ_2DA_ENTRY_FORMER "read_splprot" "%idx%" 1 "curStat"
        PATCH_IF (~%stat%~ STRING_EQUAL ~%curStat%~ OR ~%valueHex%~ STRING_EQUAL_CASE ~%curStat%~) BEGIN
          READ_2DA_ENTRY_FORMER "read_splprot" "%idx%" 2 "curValue"
          PATCH_IF (~%value%~ STRING_EQUAL ~%curValue%~) BEGIN
            READ_2DA_ENTRY_FORMER "read_splprot" "%idx%" 3 "curRelation"
            PATCH_IF (~%relation%~ STRING_EQUAL ~%curRelation%~) BEGIN
              SET "index" = "%idx%" // If already present, return its index
              SET "idx" = "%read_splprot%" // Kill FOR-loop
            END
          END
        END
      END
      // If not already present, add it...
      PATCH_IF ("%index%" < 0) BEGIN
        // Make sure we provided an identifier!
        PATCH_IF ("%label%" STRING_COMPARE_CASE "") BEGIN
          // Sanity check
          INNER_PATCH_SAVE "label" "%label%" BEGIN
            REPLACE_TEXTUALLY CASE_INSENSITIVE EVALUATE_REGEXP "[ %TAB%%WNL%%MNL%%LNL%]" ""
          END
          // Add new entry
          PATCH_IF ("%stat%" >= 0x100) BEGIN
            TEXT_SPRINT "line" ~%read_splprot%_%label% %valueHex% %value% %relation%~
          END ELSE BEGIN
            TEXT_SPRINT "line" ~%read_splprot%_%label% %stat% %value% %relation%~
          END
          INSERT_2DA_ROW "%read_splprot%" 4 ~%line%~
          // Prettify
          PRETTY_PRINT_2DA
          SET "index" = "%read_splprot%"
        END ELSE BEGIN
          PATCH_FAIL "ADD_SPLPROT_ENTRY: ~label~ cannot be empty. Please specify a human-friendly identifier (f.i. ~ALIGNMENTBITS!=MASK_LCNEUTRAL~)"
        END
      END
    BUT_ONLY_IF_IT_CHANGES
  END
END

////////////////////////////////////////////////////////////////////////
////// ADD_IDS_ENTRY (borrowed from Argent77)
////////////////////////////////////////////////////////////////////////

/*
** Adds a new entry to a specified IDS file and returns its IDS value.
**
** INT_VAR "minValue"       Minimum IDS value to consider. (Default: 0)
** INT_VAR "maxValue"       Maximum IDS value to consider. (Default: 255)
** INT_VAR "preferredValue" Try this IDS value first if available. (Default: unset)
** INT_VAR "hexadecimal"    Set to nonzero to add IDS value in hexadecimal notation. (Default: 0)
** STR_VAR "idsFile"        The IDS file to add the entry to. The current component will fail to install if the specified file does not exist as a game resource.
** STR_VAR "identifier"     The identifier name for the IDS value. Must not contain whitespace.
** RET "value"              The IDS value if entry has been added successfully (if ~%identifier%~ is already present, then it'll return its corresponding IDS value). The current component will fail to install if entry cannot be added.
*/

DEFINE_DIMORPHIC_FUNCTION "ADD_IDS_ENTRY"
INT_VAR
  "minValue"        = 0
  "maxValue"        = 255
  "preferredValue"  = "-1"
  "hexadecimal"     = 0
STR_VAR
  "idsFile"         = ""
  "identifier"      = ""
RET
  "value"
BEGIN
  // Strip ".ids" (or ".IDS") from "%idsFile%"
  ACTION_IF ((~%idsFile%~ STRING_MATCHES_REGEXP ~.+\..+~) == 0) BEGIN
    OUTER_PATCH_SAVE "idsFile" ~%idsFile%~ BEGIN
      REPLACE_TEXTUALLY ~\(.+\)\.[^.]+~ ~\1~
    END
  END
  // Main
  ACTION_IF (FILE_EXISTS_IN_GAME ~%idsFile%.ids~) BEGIN
    // If ~%identifier%~ is already present, return the corresponding value and exit
    OUTER_SET "value" = IDS_OF_SYMBOL ("%idsFile%" "%identifier%")
    ACTION_IF ("%value%" == "-1") BEGIN
      // Fix invalid "%minValue%" and/or "%maxValue%"
      ACTION_IF ("%minValue%" < 0) BEGIN
        OUTER_SET "minValue" = 0
      END
      ACTION_IF ("%maxValue%" < "%minValue%") BEGIN
        OUTER_SET "maxValue" = "%minValue%"
      END
      // Try preferred value first
      OUTER_PATCH ~~ BEGIN
        PATCH_IF ("%preferredValue%" >= "%minValue%" AND "%preferredValue%" <= "%maxValue%") BEGIN
          LOOKUP_IDS_SYMBOL_OF_INT "retVal" ~%idsFile%~ "%preferredValue%"
          PATCH_IF (~%retVal%~ STRING_EQUAL ~%preferredValue%~) BEGIN
            SET "value" = "%preferredValue%"
          END
        END
      END
      // Looking for available IDS slot
      ACTION_IF ("%value%" == "-1") BEGIN
        OUTER_PATCH ~~ BEGIN
          FOR ("v" = "%minValue%"; "%v%" <= "%maxValue%"; "v" += 1) BEGIN
            LOOKUP_IDS_SYMBOL_OF_INT "retVal" ~%idsFile%~ "%v%"
            PATCH_IF (~%retVal%~ STRING_EQUAL ~%v%~) BEGIN
              SET "value" = "%v%"
              SET "v" = "%maxValue%" + 1	// Kill FOR-loop
            END
          END
        END
      END
      // Adding new entry
      ACTION_IF ("%value%" != "-1") BEGIN
        ACTION_IF ("%hexadecimal%") BEGIN
          OUTER_PATCH "" BEGIN
            SPRINTF "idsValue" "%x" ("%value%")
            TO_UPPER "idsValue"
          END
          OUTER_TEXT_SPRINT ~idsValue~ ~0x%hexNumber%~
        END ELSE BEGIN
          OUTER_TEXT_SPRINT ~idsValue~ ~%value%~
        END
        // APPENDing to ~%idsFile%.ids~
        APPEND ~%idsFile%.ids~ ~%idsValue% %identifier%~
        // Sanity check
        ACTION_IF ("%value%" < "%minValue%" OR "%value%" > "%maxValue%") BEGIN
          FAIL ~ADD_IDS_ENTRY: the IDS value corresponding to "%identifier%" is out of bounds~
        END
      END ELSE BEGIN
        FAIL "ADD_IDS_ENTRY, ~%idsFile%.ids~: there's no room for appending ~%identifier%~"
      END
    END
  END ELSE BEGIN
    FAIL "ADD_IDS_ENTRY: the specified IDS file ~%idsFile%~ does not exist as a game resource"
  END
END

////////////////////////////////////////////////////////////////////////
//// (borrowed from SCS)
//// As to how you can clear array entries: you can't.
//// You can clear the array (the dictionary) via "\(ACTION_\)?CLEAR_ARRAY" but not the underlying struct (short of CLEAR_MEMORY).
//// On reflection I don't think that's a problem: this function works fine.
////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION ~ARRAY_CONTAINS~
STR_VAR
  "array" = "" // array name
  "key" = ""
  "value" = ""
RET
  ~found~
BEGIN
  // Initialize
  OUTER_SET ~found~ = 0 // Suppose "%key%" => "%value%" is not present
  // Main
  ACTION_PHP_EACH "%array%" AS "k" => "v" BEGIN
    ACTION_IF ("%key%" STRING_EQUAL "%k%" || "%key%" STR_EQ "") && ("%value%" STRING_EQUAL "%v%" || "%value%" STR_EQ "") BEGIN
      OUTER_SET ~found~ = 1
    END
  END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////// As a patch or action, adds a new entry to "statdesc.2da" and returns its index
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION "ADD_STATDESC_ENTRY"
INT_VAR
  "description" = "-1"
STR_VAR
  "bam_file" = "****"
RET
  "index"
BEGIN
  // Initialize
  OUTER_SET "index" = "-1"
  // Check if "%description%" and "%bam_file%" are already present
  COPY_EXISTING "statdesc.2da" "override"
    COUNT_2DA_COLS "cols"
    READ_2DA_ENTRIES_NOW "read_statdesc" "%cols%"
    FOR ("i" = 0 ; "%i%" < "%read_statdesc%" ; "i" += 1) BEGIN
      READ_2DA_ENTRY_FORMER "read_statdesc" "%i%" 0 "idx" // current index
      PATCH_IF ("%description%" == "%read_statdesc_%i%_1%") AND ("%bam_file%" STRING_EQUAL_CASE "%read_statdesc_%i%_2%") BEGIN
        SET "index" = "%read_statdesc_%i%_0%"
        SET "i" = "%read_statdesc%" + 1 // kill FOR-loop
      END
    END
    PATCH_IF ("%index%" == "-1") BEGIN
      SET "index" = "%idx%" + 1
      INSERT_2DA_ROW "%read_statdesc%" "%cols%" "%index% %description% %bam_file%"
      // Formatting
      PRETTY_PRINT_2DA
    END
  BUT_ONLY_IF_IT_CHANGES
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////// As a patch or action, takes a list of variables, returns the first entry, and strips it from the list
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION "RETURN_FIRST_ENTRY"
STR_VAR
  "list_in" = ""
  "separator" = " "
RET
  "entry"
  "list_out"
BEGIN
  // Initialize
  OUTER_TEXT_SPRINT "list_out" "%list_in%"
  // Find the first instance of "%separator%"
  OUTER_SET "found" = INDEX (CASE_INSENSITIVE EXACT_MATCH "%separator%" "%list_in%")
  ACTION_IF ("%found%" == "-1") BEGIN
    // If it can't find "%separator%", then this is the last entry => Find end of string
    OUTER_SET "found" = INDEX (CASE_INSENSITIVE EVALUATE_REGEXP "$" "%list_in%")
    OUTER_TEXT_SPRINT "list_out" ""
  END
  OUTER_SET "string_length" = STRING_LENGTH "%list_in%"
  // Return the first entry
  LAF "SUBSTRING"
  INT_VAR
    "length" = "%found%"
  STR_VAR
    "string" = "%list_in%"
  RET
    "entry" = "substring"
  END
  // Strip "%entry%" from "%list_in%" and save the resulting list as "list_out"
  ACTION_IF ("%list_out%" STRING_COMPARE_CASE "") BEGIN
    LAF "SUBSTRING"
    INT_VAR
      "start" = "%found%" + STRING_LENGTH "%separator%" // we need to take into account the length of "%separator%"
      "length" = "%string_length%" - ("%found%" + STRING_LENGTH "%separator%") // we need to take into account the length of "%separator%"
    STR_VAR
      "string" = "%list_in%"
    RET
      "list_out" = "substring"
    END
  END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////// As a patch or action, turns a list into a (simple) array
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION "ARRAY_OF_LIST"
STR_VAR
  "list" = ""
  "separator" = " "
RET_ARRAY
  "array"
BEGIN
  // Initialize
  ACTION_CLEAR_ARRAY "array"
  OUTER_SET "count" = 0
  // Main
  OUTER_WHILE ("%list%" STRING_COMPARE_CASE "") BEGIN
    LAF "RETURN_FIRST_ENTRY"
    STR_VAR
      "list_in" = "%list%"
      "separator"
    RET
      "entry"
      "list" = "list_out"
    END
    ACTION_DEFINE_ASSOCIATIVE_ARRAY "array" BEGIN
      "%count%" => "%entry%"
    END
    OUTER_SET "count" += 1
  END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////// Return the number of times ~%element%~ appears in ~%list%~ (matching is case-insensitive)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION "COUNT_ELEMENT_INSTANCES"
STR_VAR
  "list_in" = ""
  "element" = ""
  "separator" = " "
RET
  "count"
  "list_out"
BEGIN
  // Initialize
  OUTER_SET "count" = 0
  OUTER_TEXT_SPRINT "list_out" ""
  // Main
  OUTER_WHILE ("%list_in%" STRING_COMPARE_CASE "") BEGIN
    LAF "RETURN_FIRST_ENTRY"
    STR_VAR
      "list_in"
      "separator"
    RET
      "list_in" = "list_out"
      "entry"
    END
    ACTION_IF ("%entry%" STRING_EQUAL_CASE "%element%") BEGIN
      OUTER_SET "count" += 1
    END ELSE BEGIN
      OUTER_TEXT_SPRINT "list_out" "%list_out%%separator%%entry%"
    END
  END
  // Remove leading ~%separator%~
  OUTER_PATCH_SAVE "list_out" "%list_out%" BEGIN
    REPLACE_TEXTUALLY CASE_SENSITIVE EVALUATE_REGEXP "^%separator%" ""
  END
END

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*

De-localized (i.e., not language dependant) function to get the string corresponding to index #"%strref%"

*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_DIMORPHIC_FUNCTION "GT_GET_STRING"
INT_VAR
  "strref" = 0
RET
  "string"
BEGIN
  OUTER_TEXT_SPRINT "string" ""
  COPY - "lang\en_us\dialog.tlk" "override"
    READ_LONG 0xE "base_off" // Offset to base data
    READ_LONG (0x12 + 0x12 + ("%strref%" * 0x1A)) "off" // Relative offset of this string
    READ_LONG (0x12 + 0x16 + ("%strref%" * 0x1A)) "length" // Length of this string
    READ_ASCII ("%base_off%" + "%off%") "string" ("%length%")
  BUT_ONLY_IF_IT_CHANGES
END

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION ~ADD_SPELL_ABILITY~
INT_VAR
  ~type~ = 1 // Melee (should be irrelevant for `spl` files...)
  ~location~ = 4 // Ability (F13 button)
  ~target~ = 1 // Living actor
  ~#_targets~ = 0
  ~range~ = 30 // Default visual range
  ~minimum_level~ = 1
  ~casting_speed~ = 0
  ~projectile~ = IDS_OF_SYMBOL ("MISSILE" "None")
  //
  ~copy_header~ = 0
  ~insert_point~ = ~-1~ // insert last
STR_VAR
  ~icon~ = ~~
RET
  ~insert_point~
BEGIN
  //LPF ~FJ_SPL_ITM_REINDEX~ END
  ~hs~ = 0x28

  READ_LONG 0x64 ~ho~
  READ_SHORT 0x68 ~hc~
  READ_LONG 0x6a ~eo~
  ~insert_point~ = ("%insert_point%" > "%hc%" || "%insert_point%" < 0) ? "%hc%" : "%insert_point%"
  ~copy_header~ = ("%copy_header%" < 0) ? 0 : "%copy_header%"

  PATCH_IF "%copy_header%" > "%hc%" BEGIN
    PATCH_WARN ~Unable to copy %copy_header%th header, "%DEST_FILE%" contains only %hc% headers!~
  END ELSE BEGIN
    INSERT_BYTES ("%ho%" + "%insert_point%" * "%hs%") "%hs%"
    "hc" += 1
    "eo" += "%hs%"
    PATCH_IF "%copy_header%" BEGIN
      READ_SHORT ("%ho%" + ("%copy_header%" - 1) * "%hs%" + 0x1e) "ec"
      READ_SHORT ("%ho%" + ("%copy_header%" - 1) * "%hs%" + 0x20) "ei"
      READ_ASCII ("%eo%" + "%ei%" * 0x30) "effs" ("%ec%" * 0x30)
      READ_ASCII ("%ho%" + ("%copy_header%" - 1) * "%hs%") "copy" ("%hs%")
      WRITE_ASCII ("%ho%" + "%insert_point%" * "%hs%") ~%copy%~ ("%hs%")
    END
    WRITE_SHORT 0x68 "%hc%"
    WRITE_LONG 0x6a "%eo%"

    READ_SHORT 0x70 "ei" // technically, it is a counter
    FOR ("i" = "%ho%" ; "%i%" < "%ho%" + "%hc%" * "%hs%" ; "i" += "%hs%") BEGIN
      READ_SHORT "%i%" + 0x1e "ec"
      WRITE_SHORT "%i%" + 0x20 "%ei%"
      "ei" += "%ec%"
    END

    PATCH_IF "%copy_header%" BEGIN
      READ_SHORT ("%ho%" + "%insert_point%" * "%hs%" + 0x1e) "ec"
      READ_SHORT ("%ho%" + "%insert_point%" * "%hs%" + 0x20) "ei"
      INSERT_BYTES ("%eo%" + "%ei%" * 0x30) ("%ec%" * 0x30)
      WRITE_ASCII ("%eo%" + "%ei%" * 0x30) ~%effs%~ ("%ec%" * 0x30)
    END ELSE BEGIN
      "off" = "%ho%" + "%insert_point%" * "%hs%"
      WRITE_BYTE "%off%" "%type%"
      WRITE_SHORT ("%off%" + 0x2) "%location%"
      WRITE_ASCII ("%off%" + 0x4) ~%icon%~ #8
      WRITE_BYTE ("%off%" + 0xc) "%target%"
      WRITE_BYTE ("%off%" + 0xd) "%#_targets%"
      WRITE_SHORT ("%off%" + 0xe) "%range%"
      WRITE_SHORT ("%off%" + 0x10) "%minimum_level%"
      WRITE_SHORT ("%off%" + 0x12) "%casting_speed%"
      WRITE_SHORT ("%off%" + 0x26) "%projectile%"
    END
  END
END
