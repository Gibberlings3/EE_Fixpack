/*
Over the course of a fixpack, I wrote various bits of code to automatically search for issues, e.g.
much of the assets identified for the "cure" fixes were generated by such code, below. This file is
simply a way to preserve the code should we need to review or re-implement said fixes, as well as
to provide as easy place for me to make new testing code from the old.

For BG2FP, I eventually generalized some of the code and spun it off into the G3 Debugger. However,
with the exceptional advanced argent77 has made to NI it may be better to incorporate anything useful
into NI's tools instead.

Regardless, if other contributors also write temp code like this, feel free to add it here or make
your own mini repository for it.
*/

/////                                                  \\\\\
///// cure fixes                                       \\\\\
/////                                                  \\\\\

// I used this code to identify spells/items that caused or cured various
// effects which had separate opcodes for curing

<<<<<<<<./inline/weidu_output.txt
>>>>>>>>

COPY ~./inline/weidu_output.txt~ ~weidu_output.tpa~

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
                          ~^.+\.itm$~ ~override~
                          ~^.+\.spl$~ ~override~
  SET debug_cause = 0
  SET debug_cure = 0
  SPRINT misc_string ""
  SPRINT anim_string ""
  SPRINT audio_string ""
  SPRINT icon_string ""
  SET debug_other = 0
  SET cure_sleep = 0 // op 2
  SET cure_berserk = 0 // op 4
  SET cure_poison = 0 // op 11
  SET cure_stun = 0 // op 46
  SET cure_invis = 0 // op 47, 116
  SET cure_silence = 0 // op 48
  SET cure_nondetection = 0 // op 70
  SET cure_blind = 0 // op 75
  SET cure_feeblemind = 0 // op 77
  SET cure_disease = 0 // op 79
  SET cure_deafness = 0 // op 81
  SET cure_fear = 0 // op 161
  SET cure_hold = 0 // op 162
  SET cure_drunk = 0 // op 164
  SET cure_leveldrain = 0 // op 224
  SET cure_confusion = 0 // op 242
  SET cure_pause = 0 // op 270
  SET cause_sleep = 0 // op 39, 217
  SET cause_berserk = 0 // op 3
  SET cause_poison = 0 // op 25
  SET cause_stun = 0 // op 45
  SET cause_invis = 0 // op 20
  SET cause_silence = 0 // op 38
  SET cause_nondetection = 0 // op 69
  SET cause_blind = 0 // op 74
  SET cause_feeblemind = 0 // op 76
  SET cause_disease = 0 // op 78
  SET cause_deafness = 0 // op 80
  SET cause_fear = 0 // op 24
  SET cause_hold = 0 // op 109, 175
  SET cause_drunk = 0 // op 94
  SET cause_leveldrain = 0 // op 96, 216
  SET cause_confusion = 0 // op 128
  SET cause_pause = 0 // op 165
  SPRINT file "%SOURCE_RES%"
  TO_LOWER file
  // formerly the immunity post array
  READ_ASCII 0x00 file_ext (3)
  TO_LOWER file_ext
  SET min_size = 0
  PATCH_IF ("%file_ext%" STRING_COMPARE_CASE "spl" = 0) BEGIN
    READ_LONG  0x64 abil_off ELSE 0
    READ_SHORT 0x68 abil_num ELSE 0
    READ_LONG  0x6a fx_off   ELSE 0
    SET counter_offset = 0x70
    SET abil_length    = 0x28
    SET global_loop    = 0
    SET fx_type        = 0
    SET min_size       = 0x72
    SET cosmetic       = 1
  END ELSE
  PATCH_IF ("%file_ext%" STRING_COMPARE_CASE "itm" = 0) BEGIN
    READ_LONG  0x64 abil_off ELSE 0
    READ_SHORT 0x68 abil_num ELSE 0
    READ_LONG  0x6a fx_off   ELSE 0
    SET counter_offset = 0x70
    SET abil_length    = 0x38
    SET global_loop    = 1
    SET fx_type        = 0
    SET min_size       = 0x72
    READ_BYTE 0x18 flags ELSE 0
    PATCH_IF ((flags BAND BIT2) = BIT2) BEGIN // if droppable, add portrait icons and whatnot
      SET cosmetic = 1
    END ELSE BEGIN
      SET cosmetic = 0
    END
  END ELSE
  PATCH_IF ("%file_ext%" STRING_COMPARE_CASE "cre" = 0) BEGIN
    READ_LONG  0x2c4 fx_off ELSE 0
    READ_BYTE 0x33 fx_type ELSE 2
    SET abil_off       = 0
    SET abil_num       = 0
    SET counter_offset = 0x2c8
    SET abil_length    = 0
    SET global_loop    = 1
    SET min_size       = 0x2d4
    SET cosmetic       = 0
  END ELSE BEGIN
    PATCH_PRINT ~Warning on %SOURCE_FILE%: file type not recognized (%file_ext%)~
  END
  PATCH_IF ((SOURCE_SIZE >= min_size) AND (min_size != 0)) BEGIN // min_size must get set by file type detection
    SET new_fx = 0
    FOR (index = (0 - global_loop) ; index < abil_num ; ++index) BEGIN
      PATCH_IF (index < 0) BEGIN // if loop through globals needed
        SET abil_fx_idx = 0
      END ELSE BEGIN // otherwise normal ability
        SET counter_offset = (abil_off + 0x1e + (abil_length * index))
        READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
        SET abil_fx_idx += new_fx
        WRITE_SHORT (abil_off + 0x20 + (abil_length * index)) (abil_fx_idx)
      END
      READ_SHORT counter_offset counter // fx_num on global loop, otherwise abil_fx_num
      // run one pass purely looking for keys
      FOR (index2 = 0 ; index2 < counter ; ++index2) BEGIN
        READ_SHORT (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) opcode
        READ_LONG  (fx_off + 0x04 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) param1
        READ_LONG  (fx_off + 0x08 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) param2
        READ_ASCII (fx_off + 0x14 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) resref
        READ_LONG  (fx_off + 0x0e + (0x1a * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) duration
        PATCH_IF ((opcode = 177) AND (FILE_EXISTS_IN_GAME "%resref%.eff")) BEGIN // if calling an eff, substitute the eff's effects as the check
          INNER_ACTION BEGIN
            COPY_EXISTING ~%resref%.eff~ ~override~
              READ_LONG  0x10 opcode
              READ_LONG  0x1c param1
              READ_LONG  0x20 param2
              READ_ASCII 0x30 resref
              READ_LONG  0x28 duration
              BUT_ONLY
          END
        END
        PATCH_IF opcode =   2 BEGIN SET debug_cure = 1 SET cure_sleep = 1 END ELSE // op 2
        PATCH_IF opcode =   4 BEGIN SET debug_cure = 1 SET cure_berserk = 1 END ELSE // op 4
        PATCH_IF opcode =  11 BEGIN SET debug_cure = 1 SET cure_poison = 1 END ELSE // op 11
        PATCH_IF opcode =  46 BEGIN SET debug_cure = 1 SET cure_stun = 1 END ELSE // op 46
        PATCH_IF ((opcode =  47) OR (opcode = 116)) BEGIN SET debug_cure = 1 SET cure_invis = 1 END ELSE // op 47, 116
        PATCH_IF opcode =  48 BEGIN SET debug_cure = 1 SET cure_silence = 1 END ELSE // op 48
        PATCH_IF opcode =  70 BEGIN SET debug_cure = 1 SET cure_nondetection = 1 END ELSE // op 70
        PATCH_IF opcode =  75 BEGIN SET debug_cure = 1 SET cure_blind = 1 END ELSE // op 75
        PATCH_IF opcode =  77 BEGIN SET debug_cure = 1 SET cure_feeblemind = 1 END ELSE // op 77
        PATCH_IF opcode =  79 BEGIN SET debug_cure = 1 SET cure_disease = 1 END ELSE // op 79
        PATCH_IF opcode =  81 BEGIN SET debug_cure = 1 SET cure_deafness = 1 END ELSE // op 81
        PATCH_IF opcode = 161 BEGIN SET debug_cure = 1 SET cure_fear = 1 END ELSE // op 161
        PATCH_IF opcode = 162 BEGIN SET debug_cure = 1 SET cure_hold = 1 END ELSE // op 162
        PATCH_IF opcode = 164 BEGIN SET debug_cure = 1 SET cure_drunk = 1 END ELSE // op 164
        PATCH_IF opcode = 224 BEGIN SET debug_cure = 1 SET cure_leveldrain = 1 END ELSE // op 224
        PATCH_IF opcode = 242 BEGIN SET debug_cure = 1 SET cure_confusion = 1 END ELSE // op 242
        PATCH_IF opcode = 270 BEGIN SET debug_cure = 1 SET cure_pause = 1 END ELSE // op 270
        PATCH_IF ((opcode =  39) OR (opcode = 217)) BEGIN SET debug_cause = 1 SET cause_sleep = 1 END ELSE // op 39, 217
        PATCH_IF opcode =   3 BEGIN SET debug_cause = 1 SET cause_berserk = 1 END ELSE // op 3
        PATCH_IF opcode =  25 BEGIN SET debug_cause = 1 SET cause_poison = 1 END ELSE // op 25
        PATCH_IF opcode =  45 BEGIN SET debug_cause = 1 SET cause_stun = 1 END ELSE // op 45
        PATCH_IF opcode =  20 BEGIN SET debug_cause = 1 SET cause_invis = 1 END ELSE // op 20
        PATCH_IF opcode =  38 BEGIN SET debug_cause = 1 SET cause_silence = 1 END ELSE // op 38
        PATCH_IF opcode =  69 BEGIN SET debug_cause = 1 SET cause_nondetection = 1 END ELSE // op 69
        PATCH_IF opcode =  74 BEGIN SET debug_cause = 1 SET cause_blind = 1 END ELSE // op 74
        PATCH_IF opcode =  76 BEGIN SET debug_cause = 1 SET cause_feeblemind = 1 END ELSE // op 76
        PATCH_IF opcode =  78 BEGIN SET debug_cause = 1 SET cause_disease = 1 END ELSE // op 78
        PATCH_IF opcode =  80 BEGIN SET debug_cause = 1 SET cause_deafness = 1 END ELSE // op 80
        PATCH_IF opcode =  24 BEGIN SET debug_cause = 1 SET cause_fear = 1 END ELSE // op 24
        PATCH_IF ((opcode =  109) OR (opcode = 175)) BEGIN SET debug_cause = 1 SET cause_hold = 1 END ELSE // op 109, 175
        PATCH_IF opcode =  94 BEGIN SET debug_cause = 1 SET cause_drunk = 1 END ELSE // op 94
        PATCH_IF ((opcode =  96) OR (opcode = 216)) BEGIN SET debug_cause = 1 SET cause_leveldrain = 1 END ELSE // op 96, 216
        PATCH_IF opcode = 128 BEGIN SET debug_cause = 1 SET cause_confusion = 1 END ELSE // op 128
        PATCH_IF opcode = 165 BEGIN SET debug_cause = 1 SET cause_pause = 1 END ELSE // op 165
        PATCH_IF ((opcode = 215) AND (duration > 5)) BEGIN
          SPRINT anim_string "%anim_string% %resref%"
        END ELSE
        PATCH_IF ((opcode = 174) AND (duration > 5)) BEGIN
          SPRINT audio_string "%audio_string% %resref%"
        END ELSE
        PATCH_IF ((opcode = 142) AND (duration > 5)) BEGIN
          SPRINT icon_string "%icon_string% %param2%"
        END ELSE
        PATCH_IF (duration > 5) BEGIN // has some other, unspecified effect of  one round+
          SET debug_other = 1
        END
      END
      WRITE_SHORT counter_offset counter
    END

    // debug message
    PATCH_IF debug_cure OR debug_cause BEGIN
      PATCH_IF debug_cure BEGIN
        SPRINT cure_string " - cures"
      END
      PATCH_IF debug_cause BEGIN
        SPRINT cause_string " - causes"
      END
      PATCH_IF ("%icon_string%" STRING_COMPARE_CASE "") BEGIN // if portrait icons found
        SPRINT misc_string "%misc_string% - portrait icon(s)%icon_string%"
      END
      PATCH_IF ("%audio_string%" STRING_COMPARE_CASE "") BEGIN // if audio found
        SPRINT misc_string "%misc_string% - sound(s)%audio_string%"
      END
      PATCH_IF ("%anim_string%" STRING_COMPARE_CASE "") BEGIN // if animations found
        SPRINT misc_string "%misc_string% - animations(s)%anim_string%"
      END
      PATCH_IF debug_other BEGIN // if other effects
        SPRINT misc_string "%misc_string% - additional effects"
      END
      PATCH_IF cure_berserk BEGIN SPRINT cure_string "%cure_string% berserk" END // op 4
      PATCH_IF cure_blind BEGIN SPRINT cure_string "%cure_string% blind" END // op 75
      PATCH_IF cure_confusion BEGIN SPRINT cure_string "%cure_string% confusion" END // op 242
      PATCH_IF cure_deafness BEGIN SPRINT cure_string "%cure_string% deafness" END // op 81
      PATCH_IF cure_disease BEGIN SPRINT cure_string "%cure_string% disease" END // op 79
      PATCH_IF cure_drunk BEGIN SPRINT cure_string "%cure_string% drunkenness" END // op 164
      PATCH_IF cure_fear BEGIN SPRINT cure_string "%cure_string% fear" END // op 161
      PATCH_IF cure_feeblemind BEGIN SPRINT cure_string "%cure_string% feeblemind" END // op 77
      PATCH_IF cure_hold BEGIN SPRINT cure_string "%cure_string% hold" END // op 162
      PATCH_IF cure_invis BEGIN SPRINT cure_string "%cure_string% invisibility" END // op 47, 116
      PATCH_IF cure_leveldrain BEGIN SPRINT cure_string "%cure_string% level drain" END // op 224
      PATCH_IF cure_nondetection BEGIN SPRINT cure_string "%cure_string% nondetection" END // op 70
      PATCH_IF cure_pause BEGIN SPRINT cure_string "%cure_string% pause" END // op 270
      PATCH_IF cure_poison BEGIN SPRINT cure_string "%cure_string% poison" END // op 11
      PATCH_IF cure_silence BEGIN SPRINT cure_string "%cure_string% silence" END // op 48
      PATCH_IF cure_sleep BEGIN SPRINT cure_string "%cure_string% sleep" END // op 2
      PATCH_IF cure_stun BEGIN SPRINT cure_string "%cure_string% stun" END // op 46
      PATCH_IF cause_berserk BEGIN SPRINT cause_string "%cause_string% berserk" END // op 3
      PATCH_IF cause_blind BEGIN SPRINT cause_string "%cause_string% blind" END // op 74
      PATCH_IF cause_confusion BEGIN SPRINT cause_string "%cause_string% confusion" END // op 128
      PATCH_IF cause_deafness BEGIN SPRINT cause_string "%cause_string% deafness" END // op 80
      PATCH_IF cause_disease BEGIN SPRINT cause_string "%cause_string% disease" END // op 78
      PATCH_IF cause_drunk BEGIN SPRINT cause_string "%cause_string% drunkenness" END // op 94
      PATCH_IF cause_fear BEGIN SPRINT cause_string "%cause_string% fear" END // op 24
      PATCH_IF cause_feeblemind BEGIN SPRINT cause_string "%cause_string% feeblemind" END // op 76
      PATCH_IF cause_hold BEGIN SPRINT cause_string "%cause_string% hold" END // op 109, 175
      PATCH_IF cause_invis BEGIN SPRINT cause_string "%cause_string% invisibility" END // op 20
      PATCH_IF cause_leveldrain BEGIN SPRINT cause_string "%cause_string% level drain" END // op 96, 216
      PATCH_IF cause_nondetection BEGIN SPRINT cause_string "%cause_string% nondetection" END // op 69
      PATCH_IF cause_pause BEGIN SPRINT cause_string "%cause_string% pause" END // op 165
      PATCH_IF cause_poison BEGIN SPRINT cause_string "%cause_string% poison" END // op 25
      PATCH_IF cause_silence BEGIN SPRINT cause_string "%cause_string% silence" END // op 38
      PATCH_IF cause_sleep BEGIN SPRINT cause_string "%cause_string% sleep" END // op 39, 217
      PATCH_IF cause_stun BEGIN SPRINT cause_string "%cause_string% stun" END // op 45
      READ_LONG 0x0c name
      PATCH_IF (name > 0) AND (name < 999999) BEGIN
        READ_STRREF 0x0c name
      END ELSE BEGIN
        READ_STRREF 0x08 name
      END
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^........$" = 0) BEGIN SPRINT spc " " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^.......$" = 0) BEGIN SPRINT spc "  " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^......$" = 0) BEGIN SPRINT spc "   " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^.....$" = 0) BEGIN SPRINT spc "    " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^....$" = 0) BEGIN SPRINT spc "     " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^...$" = 0) BEGIN SPRINT spc "      " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^..$" = 0) BEGIN SPRINT spc "       " END ELSE
                                                          BEGIN SPRINT spc "        " END
      INNER_ACTION BEGIN
        ACTION_IF debug_cure BEGIN
          APPEND_OUTER ~weidu_output.tpa~ "              ~%file%.%file_ext%~%spc%~override~ // %name%%cure_string%%misc_string%"
        END
        ACTION_IF debug_cause BEGIN
          APPEND_OUTER ~weidu_output.tpa~ "    ~%file%~%spc%// (%file_ext%) %name%%cause_string%%misc_string%"
        END
      END
    END

  END // end file size check
  BUT_ONLY

/////                                                  \\\\\
///// checking equipment minimums                      \\\\\
/////                                                  \\\\\

COPY_EXISTING_REGEXP GLOB ~^.+\itm$~ ~override~
  READ_SHORT 0x26 str
  READ_BYTE 0x28 strex
  READ_BYTE 0x2a int
  READ_BYTE 0x2c dex
  READ_BYTE 0x2e wis
  READ_BYTE 0x30 con
  READ_BYTE 0x32 chr
  TO_LOWER SOURCE_RES
  DEFINE_ASSOCIATIVE_ARRAY cd_item_min_str BEGIN ~%SOURCE_RES%~ => ~%str%~ END
  DEFINE_ASSOCIATIVE_ARRAY cd_item_min_strex BEGIN ~%SOURCE_RES%~ => ~%strex%~ END
  DEFINE_ASSOCIATIVE_ARRAY cd_item_min_int BEGIN ~%SOURCE_RES%~ => ~%int%~ END
  DEFINE_ASSOCIATIVE_ARRAY cd_item_min_dex BEGIN ~%SOURCE_RES%~ => ~%dex%~ END
  DEFINE_ASSOCIATIVE_ARRAY cd_item_min_wis BEGIN ~%SOURCE_RES%~ => ~%wis%~ END
  DEFINE_ASSOCIATIVE_ARRAY cd_item_min_con BEGIN ~%SOURCE_RES%~ => ~%con%~ END
  DEFINE_ASSOCIATIVE_ARRAY cd_item_min_chr BEGIN ~%SOURCE_RES%~ => ~%chr%~ END
  BUT_ONLY

//COPY_EXISTING ~gnoll01.cre~ ~override~
COPY_EXISTING_REGEXP GLOB ~^.+\cre$~ ~override~
  READ_LONG 0x2c0 item_num
  PATCH_IF item_num > 0 BEGIN
    READ_BYTE 0x238 str
    READ_BYTE 0x239 strex
    READ_BYTE 0x23a int
    READ_BYTE 0x23c dex
    READ_BYTE 0x23b wis
    READ_BYTE 0x23d con
    READ_BYTE 0x23e chr
    READ_LONG 0x2bc item_off
    FOR (index = 0 ; index < item_num ; ++index) BEGIN
      SPRINT debug ~~
      READ_ASCII (item_off + 0x00 + (index * 0x14)) item
      TO_LOWER item
      PATCH_IF VARIABLE_IS_SET $cd_item_min_str("%item%") BEGIN
        //PATCH_PRINT ~checking %item% in %SOURCE_RES%~
        SET str_check = $cd_item_min_str("%item%")
        SET strex_check = $cd_item_min_strex("%item%")
        SET int_check = $cd_item_min_int("%item%")
        SET dex_check = $cd_item_min_dex("%item%")
        SET wis_check = $cd_item_min_wis("%item%")
        SET con_check = $cd_item_min_con("%item%")
        SET chr_check = $cd_item_min_chr("%item%")
        PATCH_IF str_check   > str   BEGIN SPRINT debug ~%debug% STR (%str_check% > %str%)~ END
        PATCH_IF strex_check > strex BEGIN SPRINT debug ~%debug% STREX (%strex_check% > %strex%)~ END
        PATCH_IF int_check   > int   BEGIN SPRINT debug ~%debug% INT (%int_check% > %int%)~ END
        PATCH_IF dex_check   > dex   BEGIN SPRINT debug ~%debug% DEX (%dex_check% > %dex%)~ END
        PATCH_IF wis_check   > wis   BEGIN SPRINT debug ~%debug% WIS (%wis_check% > %wis%)~ END
        PATCH_IF con_check   > con   BEGIN SPRINT debug ~%debug% CON (%con_check% > %con%)~ END
        PATCH_IF chr_check   > chr   BEGIN SPRINT debug ~%debug% CHR (%chr_check% > %chr%)~ END
        PATCH_IF (~%debug%~ STRING_COMPARE_CASE ~~) BEGIN
          PATCH_PRINT ~ == %item% cannot be wielded by %SOURCE_FILE%:%debug%~
        END
      END
    END
  END
  BUT_ONLY








// used to sort Parys' pile of new item BAMs into folders, removing redundancies
// the last bit only works if run in a bgee directory without SoD
<<<<<<<<./inline/blank.txt
>>>>>>>>

COPY ~./inline/blank.txt~ ~eefixpack/newbam.txt~

OUTER_SET bgee  = 1
ACTION_BASH_FOR ~eefixpack/newbams/bgee~ ~.+\.bam~ BEGIN

  OUTER_SET bg2ee = 0
  OUTER_SET iwdee = 0
  ACTION_IF FILE_EXISTS ~eefixpack/newbams/bg2ee/%BASH_FOR_FILE%~ BEGIN OUTER_SET bg2ee = 1 END
  ACTION_IF FILE_EXISTS ~eefixpack/newbams/iwdee/%BASH_FOR_FILE%~ BEGIN OUTER_SET iwdee = 1 END
  ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_new_bams BEGIN ~%BASH_FOR_RES%~, ~%bgee%~, ~%bg2ee%~, ~%iwdee%~ => ~%BASH_FOR_RES%~ END

END

OUTER_SET bgee  = 0
OUTER_SET bg2ee = 1
ACTION_BASH_FOR ~eefixpack/newbams/bg2ee~ ~.+\.bam~ BEGIN

  ACTION_IF !FILE_EXISTS ~eefixpack/newbams/bgee/%BASH_FOR_FILE%~ BEGIN
    OUTER_SET iwdee = 0
    ACTION_IF FILE_EXISTS ~eefixpack/newbams/iwdee/%BASH_FOR_FILE%~ BEGIN OUTER_SET iwdee = 1 END
    ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_new_bams BEGIN ~%BASH_FOR_RES%~, ~%bgee%~, ~%bg2ee%~, ~%iwdee%~ => ~%BASH_FOR_RES%~ END
  END

END

OUTER_SET bgee  = 0
OUTER_SET bg2ee = 0
OUTER_SET iwdee = 1
ACTION_BASH_FOR ~eefixpack/newbams/bg2ee~ ~.+\.bam~ BEGIN

  ACTION_IF !FILE_EXISTS ~eefixpack/newbams/bgee/%BASH_FOR_FILE%~ AND
            !FILE_EXISTS ~eefixpack/newbams/bg2ee/%BASH_FOR_FILE%~ BEGIN
    ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_new_bams BEGIN ~%BASH_FOR_RES%~, ~%bgee%~, ~%bg2ee%~, ~%iwdee%~ => ~%BASH_FOR_RES%~ END
  END

END

ACTION_PHP_EACH cd_new_bams AS pm => file BEGIN

  OUTER_SPRINT report ~%file%.bam:%WNL%~

  ACTION_IF pm_1 BEGIN // has a BGEE bam
    COPY - ~eefixpack/newbams/bgee/%file%.bam~ ~eefixpack/newbams/bgee/%file%.bam~
      SET bg_size = SOURCE_SIZE
      READ_ASCII 0x00 bg_contents (SOURCE_SIZE)
  END

  ACTION_IF pm_2 BEGIN // has a BGEE bam
    COPY - ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/newbams/bg2ee/%file%.bam~
      SET bg2_size = SOURCE_SIZE
      READ_ASCII 0x00 bg2_contents (SOURCE_SIZE)
  END

  ACTION_IF pm_3 BEGIN // has a BGEE bam
    COPY - ~eefixpack/newbams/iwdee/%file%.bam~ ~eefixpack/newbams/iwdee/%file%.bam~
      SET iwd_size = SOURCE_SIZE
      READ_ASCII 0x00 iwd_contents (SOURCE_SIZE)
  END

  OUTER_SET bgee_bg2ee  = 0
  OUTER_SET bgee_iwdee  = 0
  OUTER_SET bg2ee_iwdee = 0

  ACTION_IF pm_1 AND pm_2 BEGIN
    ACTION_IF (bg_size = bg2_size) AND
              ("%bg_contents%" STRING_COMPARE_CASE "%bg2_contents%" = 0) BEGIN
      OUTER_SET bgee_bg2ee  = 1
    END
  END

  ACTION_IF pm_1 AND pm_3 BEGIN
    ACTION_IF (bg_size = iwd_size) AND
              ("%bg_contents%" STRING_COMPARE_CASE "%iwd_contents%" = 0) BEGIN
      OUTER_SET bgee_iwdee  = 1
    END
  END

  ACTION_IF pm_2 AND pm_3 BEGIN
    ACTION_IF (bg2_size = iwd_size) AND
              ("%bg2_contents%" STRING_COMPARE_CASE "%iwd_contents%" = 0) BEGIN
      OUTER_SET bg2ee_iwdee  = 1
    END
  END

  ACTION_IF pm_1 AND pm_2 AND pm_3 BEGIN
    OUTER_SPRINT report ~%report% - present for all games%WNL%~
    ACTION_IF bgee_bg2ee AND bgee_iwdee BEGIN
      OUTER_SPRINT report ~%report% - identical in all games~
      COPY ~eefixpack/newbams/bgee/%file%.bam~ ~eefixpack/sorted_bams/universal/%file%.bam~
    END ELSE BEGIN
      ACTION_IF !bgee_bg2ee AND !bgee_iwdee AND !bg2ee_iwdee BEGIN
        OUTER_SPRINT report ~%report% - different in all games~
        COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee/%file%.bam~
        COPY ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/sorted_bams/bg2ee/%file%.bam~
        COPY ~eefixpack/newbams/iwdee/%file%.bam~ ~eefixpack/sorted_bams/iwdee/%file%.bam~
      END ELSE
      ACTION_IF bgee_bg2ee BEGIN
        OUTER_SPRINT report ~%report% - BG, BG2 version match; IWD version different~
        COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee_bg2ee/%file%.bam~
        COPY ~eefixpack/newbams/iwdee/%file%.bam~ ~eefixpack/sorted_bams/iwdee/%file%.bam~
      END ELSE
      ACTION_IF bgee_iwdee BEGIN
        OUTER_SPRINT report ~%report% - BG, IWD version match; BG2 version different~
        COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee_iwdee/%file%.bam~
        COPY ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/sorted_bams/bg2ee/%file%.bam~
      END ELSE BEGIN
        OUTER_SPRINT report ~%report% - BG2, IWD version match; BG version different~
        COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee/%file%.bam~
        COPY ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/sorted_bams/bg2ee_iwdee/%file%.bam~
      END
    END
  END

  ACTION_IF pm_1 AND pm_2 AND !pm_3 BEGIN
    OUTER_SPRINT report ~%report% - present for BG, BG2%WNL%~
    ACTION_IF bgee_bg2ee BEGIN
      OUTER_SPRINT report ~%report% - identical in all games~
        COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee_bg2ee/%file%.bam~
    END ELSE BEGIN
      OUTER_SPRINT report ~%report% - do not match~
      COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee/%file%.bam~
      COPY ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/sorted_bams/bg2ee/%file%.bam~
    END
  END

  ACTION_IF pm_1 AND !pm_2 AND pm_3 BEGIN
    OUTER_SPRINT report ~%report% - present for BG, IWD%WNL%~
    ACTION_IF bgee_iwdee BEGIN
      OUTER_SPRINT report ~%report% - identical in all games~
      COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee_iwdee/%file%.bam~
    END ELSE BEGIN
      OUTER_SPRINT report ~%report% - do not match~
      COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee/%file%.bam~
      COPY ~eefixpack/newbams/iwdee/%file%.bam~ ~eefixpack/sorted_bams/iwdee/%file%.bam~
    END
  END

  ACTION_IF !pm_1 AND pm_2 AND pm_3 BEGIN
    OUTER_SPRINT report ~%report% - present for BG2, IWD%WNL%~
    ACTION_IF bg2ee_iwdee BEGIN
      OUTER_SPRINT report ~%report% - identical in all games~
      COPY ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/sorted_bams/bg2ee_iwdee/%file%.bam~
    END ELSE BEGIN
      OUTER_SPRINT report ~%report% - do not match~
      COPY ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/sorted_bams/bg2ee/%file%.bam~
      COPY ~eefixpack/newbams/iwdee/%file%.bam~ ~eefixpack/sorted_bams/iwdee/%file%.bam~
    END
  END

  ACTION_IF pm_1 AND !pm_2 AND !pm_3 BEGIN
    OUTER_SPRINT report ~%report% - exclusive to BG%WNL%~
    COPY ~eefixpack/newbams/bgee/%file%.bam~  ~eefixpack/sorted_bams/bgee/%file%.bam~
  END

  ACTION_IF !pm_1 AND pm_2 AND !pm_3 BEGIN
    OUTER_SPRINT report ~%report% - exclusive to BG2%WNL%~
    COPY ~eefixpack/newbams/bg2ee/%file%.bam~ ~eefixpack/sorted_bams/bg2ee/%file%.bam~
  END

  ACTION_IF !pm_1 AND !pm_2 AND pm_3 BEGIN
    OUTER_SPRINT report ~%report% - exclusive to IWD%WNL%~
    COPY ~eefixpack/newbams/iwdee/%file%.bam~ ~eefixpack/sorted_bams/iwdee/%file%.bam~
  END

  APPEND_OUTER ~eefixpack/newbam.txt~ ~%report%%WNL%%WNL%~

END

ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_dirs BEGIN

  bgee       => sod
  bgee_bg2ee => sod_bg2ee
  bgee_iwdee => sod_iwdee
  universal  => sod_bg2ee_iwdee

END

ACTION_PHP_EACH cd_dirs AS src => dst BEGIN

  ACTION_BASH_FOR ~eefixpack/files/bam/item_shadows/%src%~ ~.+\.bam~ BEGIN

    ACTION_IF !FILE_EXISTS_IN_GAME ~%BASH_FOR_FILE%~ BEGIN
      COPY "%BASH_FOR_FILESPEC%" ~eefixpack/files/bam/item_shadows/%dst%/%BASH_FOR_FILE%~
      DELETE "%BASH_FOR_FILESPEC%"
    END

  END

END





// for finding melee weapons without str flags
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  READ_LONG 0x18 flags
  PATCH_IF ((flags & BIT2) = 0) BEGIN // if undroppable
    READ_LONG  0x64 abil_off
    READ_SHORT 0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      READ_BYTE  (abil_off + 0x00 + (index * 0x38)) type
      READ_BYTE  (abil_off + 0x02 + (index * 0x38)) loc
      READ_LONG  (abil_off + 0x26 + (index * 0x38)) aflags
      READ_SHORT (abil_off + 0x1a + (index * 0x38)) dam
      READ_BYTE  (abil_off + 0x18 + (index * 0x38)) dicenum
      READ_BYTE  (abil_off + 0x16 + (index * 0x38)) dicesize
      PATCH_IF (((type = 1) AND (loc = 1) AND ((aflags & BIT0) = 0)) AND
                ((dam != 0) OR (dicenum != 0 AND dicesize != 0))) BEGIN
        PATCH_PRINT "               ~%SOURCE_FILE%~ ~override~ // (iwdee) has a melee ability without strength bonus"
      END
    END
  END
  BUT_ONLY


// fixing silver dragon breath - I used this to adjust the x/y coordinates to match
// up with the silver dragon creature animation. After these adjustments I used NI's
// bam editor to pad out each sequence with blank frames so that it won't repeat

  ACTION_DEFINE_ASSOCIATIVE_ARRAY pro_offs BEGIN
// move left: increase x
// move up:   increase y

   0, "-52", "-109" =>  0
   8,  "-5", "-119" =>  8
  16,  "40", "-104" => 16
  24,  "83", "-110" => 24
  32, "116",  "-88" => 32
  40, "142",  "-67" => 40
  48, "127",  "-35" => 48
  56,  "61",  "-65" => 56
  64,  "53",  "-58" => 64
END

COPY_EXISTING ~spsdbur.bam~ ~override~
  READ_ASCII 0x0 sg (4) //Signature
  PATCH_IF NOT (~%sg%~ STRING_EQUAL_CASE ~BAMC~ = 1) BEGIN
    PATCH_PRINT ~%SOURCE_FILE% is not a compressed BAM.~
  END ELSE BEGIN
    READ_LONG 0x8 dl //Uncompressed data length
    DECOMPRESS_REPLACE_FILE 0xc (SOURCE_SIZE - 0xc) dl
    READ_LONG  0x0c frame_offset
    PATCH_PHP_EACH pro_offs AS var => idx BEGIN
      FOR (index = idx ; index <= (idx + 7) ; ++index) BEGIN
        WRITE_SHORT (frame_offset + 0x04 + (index * 0x0c)) THIS + var_1
        WRITE_SHORT (frame_offset + 0x06 + (index * 0x0c)) THIS + var_2
      END
    END
  END
  BUT_ONLY



// used to find leftover copy-paste spellbooks such as
// https://github.com/CamDawg/EE_Fixpack/commit/b19f8a311b7b7b7dff8c9702a1aeabe53197e697

COPY_EXISTING ~shadowsu.cre~ ~override~
  READ_LONG 0x2a0 known_off_base
  READ_LONG 0x2a4 known_num_base
  READ_LONG 0x2a8 minfo_off_base
  READ_LONG 0x2ac minfo_num_base
  READ_LONG 0x2b0 mem_off_base
  READ_LONG 0x2b4 mem_num_base
  READ_ASCII (known_off_base) known_orig (known_num_base * 0x0c)
  READ_ASCII (minfo_off_base) minfo_orig (minfo_num_base * 0x10)
  READ_ASCII (mem_off_base)   mem_orig   (mem_num_base * 0x0c)
  BUT_ONLY

COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  READ_LONG 0x2a4 known_num
  READ_LONG 0x2ac minfo_num
  READ_LONG 0x2b4 mem_num
  PATCH_IF ((known_num = known_num_base) AND (minfo_num = minfo_num_base) AND (mem_num = mem_num_base)) BEGIN
    READ_LONG 0x2a0 known_off
    READ_LONG 0x2a8 minfo_off
    READ_LONG 0x2b0 mem_off
    READ_ASCII (known_off) known (known_num_base * 0x0c)
    READ_ASCII (minfo_off) minfo (minfo_num_base * 0x10)
    READ_ASCII (mem_off)   mem   (mem_num_base * 0x0c)
    PATCH_IF (("%known%" STRING_COMPARE_CASE "%known_orig%" = 0) AND
              ("%minfo%" STRING_COMPARE_CASE "%minfo_orig%" = 0) AND
              ("%mem%"   STRING_COMPARE_CASE "%mem_orig%"   = 0)) BEGIN
      SPRINT file "%SOURCE_RES%"
      TO_LOWER file
      READ_LONG 0x0c name
      PATCH_IF (name > 0) AND (name < 999999) BEGIN
        READ_STRREF 0x0c name
      END ELSE BEGIN
        READ_STRREF 0x08 name
      END
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^........$" = 0) BEGIN SPRINT spc " " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^.......$" = 0) BEGIN SPRINT spc "  " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^......$" = 0) BEGIN SPRINT spc "   " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^.....$" = 0) BEGIN SPRINT spc "    " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^....$" = 0) BEGIN SPRINT spc "     " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^...$" = 0) BEGIN SPRINT spc "      " END ELSE
      PATCH_IF ("%file%" STRING_COMPARE_REGEXP "^..$" = 0) BEGIN SPRINT spc "       " END ELSE
                                                          BEGIN SPRINT spc "        " END
      PATCH_PRINT "    ~%SOURCE_FILE%~%spc%~override~ // %name%"
    END
  END
  BUT_ONLY






// infravision: checking creatures for being undead v. using an undead animation
OUTER_SPRINT debug ~~
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  SET undead = 0
  SET undead_anim = 0
  READ_BYTE 0x271 general
  PATCH_IF general = 4 BEGIN SET undead = 1 END
  READ_LONG 0x28 anim
  PATCH_IF ((anim = 0x2300) OR (anim = 0x6403) OR (anim = 0x7700) OR (anim = 0x7701) OR (anim = 0x7702) OR (anim = 0x7703) OR (anim = 0x7b04) OR (anim = 0x7b05) OR
            (anim = 0x7b06) OR (anim = 0x7d00) OR (anim = 0x7f0d) OR (anim = 0x7f0e) OR (anim = 0x7f12) OR (anim = 0x7f22) OR (anim = 0x7f30) OR (anim = 0x7f46) OR
            (anim = 0xe050) OR (anim = 0xe060) OR (anim = 0xe080) OR (anim = 0xe0f2) OR (anim = 0xe25e) OR (anim = 0xe25f) OR (anim = 0xe28f) OR (anim = 0xe292) OR
            (anim = 0xe294) OR (anim = 0xe300) OR (anim = 0xe310) OR (anim = 0xe320) OR (anim = 0xea10) OR (anim = 0xea20) OR (anim = 0xeb00) OR (anim = 0xeb10) OR
            (anim = 0xeb20) OR (anim = 0xec00) OR (anim = 0xec10) OR (anim = 0xec20) OR (anim = 0xee00) OR (anim = 0xee10)) BEGIN
    SET undead_anim = 1
  END
  PATCH_IF ((!undead AND undead_anim) OR (undead AND !undead_anim)) BEGIN
    READ_LONG 0x0c name
    PATCH_IF (name > 0) AND (name < 999999) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_REGEXP "^........$" = 0) BEGIN SPRINT spc " " END ELSE
    PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_REGEXP "^.......$" = 0) BEGIN SPRINT spc "  " END ELSE
    PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_REGEXP "^......$" = 0) BEGIN SPRINT spc "   " END ELSE
    PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_REGEXP "^.....$" = 0) BEGIN SPRINT spc "    " END ELSE
    PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_REGEXP "^....$" = 0) BEGIN SPRINT spc "     " END ELSE
    PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_REGEXP "^...$" = 0) BEGIN SPRINT spc "      " END ELSE
    PATCH_IF ("%SOURCE_RES%" STRING_COMPARE_REGEXP "^..$" = 0) BEGIN SPRINT spc "       " END ELSE
                                                        BEGIN SPRINT spc "        " END
    TO_LOWER SOURCE_FILE
    PATCH_IF undead BEGIN
      SPRINT debug "%debug%%LNL%                ~%SOURCE_FILE%~%spc%~override~ // %name%: undead using non-undead animation %anim%"
    END ELSE BEGIN
      SPRINT debug "%debug%%LNL%                ~%SOURCE_FILE%~%spc%~override~ // %name%: non-undead using undead animation %anim%"
    END
  END
  BUT_ONLY
PRINT ~%debug%~
