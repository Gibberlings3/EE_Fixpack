/*
ignore-dependencies{anon_define sfo_path}
describe-library{Functions to patch the Enhanced-Edition user interface.</p>

<p>These functions mostly work like this. An object in the current file (normally ui.menu, but sometimes a ui object extracted from ui.menu) is located by (i) the object type (e.g., 'menu'), a field in the object used to identify it (e.g., 'name' - this is the default value), and a value of that field (e.g., 'CHARGEN_CLASS').
The function then goes through the UI until it finds the (hopefully unique) object matching that description. The object is pulled out of ui.menu and patched; then it's substituted back in.<p>

<p>Technically this library depends on lib_anon (since it permits anonymous functions) and lib_sfo (since it uses sfo_path) but if you don't use either feature, it's self-contained.}

*/

/*
document{UI_alter_object}
{Apply the patch function 'patch' to the matched ui object in the current file, and substitute the result back in. You can use the anonymous function construct.}
*/

DEFINE_PATCH_FUNCTION UI_alter_object
    STR_VAR object=""
            object_type=""
            object_name_field="name"
            patch=""//function
BEGIN
   LPF UI_patch_object_master STR_VAR object object_type object_name_field patch type=alter END
END

/*
document{UI_analyze_object}
{Apply the patch function 'patch' to the matched ui object in the current file. 'patch' should return an array called 'patch_output, which is in turn returned
by UI_analyze object return 'patch_output' The actual result of the patch is discarded (i.e., the file being patched isn't changed), so the purpose of
this is to extract information from ui.menu. You can use the anonymous function construct.}
*/

DEFINE_PATCH_FUNCTION UI_analyze_object
    STR_VAR object=""
            object_type=""
            object_name_field="name"
            patch=""//function
    RET_ARRAY patch_output
BEGIN
   LPF UI_patch_object_master STR_VAR object object_type object_name_field patch type=analyze RET_ARRAY patch_output END
END

/*
document{UI_return_object}
{Apply the patch function 'patch' to the matched ui object in the current file, and then return that object, as the value of a string variable.}
*/

DEFINE_PATCH_FUNCTION UI_return_object // for secondary analysis
    STR_VAR object=""
            object_type=""
            object_name_field="name"
            patch=""//function
    RET object_data
BEGIN
   LPF UI_patch_object_master STR_VAR object object_type object_name_field patch type=return RET object_data END
END

/*
document{UI_replace_object}
{Replace the matched ui object in the current file with the contents of the file 'replace' (optionally located at the location picked out by path/location/locbase in usual SFO fashion).}
*/

DEFINE_PATCH_FUNCTION UI_replace_object
    STR_VAR object=""
            object_type=""
            object_name_field="name"
            replace=""
			path=""
			location=""
			locbase=""
BEGIN
   INNER_ACTION BEGIN
	  ACTION_IF "%path%%location%%locbase%" STR_CMP "" BEGIN
		LAF sfo_path STR_VAR path location locbase file="%replace%" RET replace=file_path END
	  END
      COPY - "%replace%" nowhere EVALUATE_BUFFER
        READ_ASCII 0x0 insert_data (BUFFER_LENGTH)
        SPRINT insert_data "%WNL%%insert_data%%WNL%"
      BUT_ONLY
   END
   LPF UI_patch_object_master STR_VAR object object_type object_name_field type=replace insert_data END
END

/*
document{UI_insert_into_object}
{Insert the contents of the file 'insert' (optionally located at the location picked out by path/location/locbase in usual SFO fashion) at the end of the matched ui object in the current file. Alternately, insert the string 'insert_data' in this way.}
*/

DEFINE_PATCH_FUNCTION UI_insert_into_object
    STR_VAR object=""
            object_type=""
            object_name_field="name"
            insert=""
			insert_data=""
			path=""
			location=""
			locbase=""
BEGIN
   INNER_ACTION BEGIN
	  ACTION_IF "%path%%location%%locbase%" STR_CMP "" BEGIN
		LAF sfo_path STR_VAR path location locbase file="%insert%" RET insert=file_path END
	  END
	  ACTION_IF "%insert_data%" STR_EQ "" BEGIN
		  COPY - "%insert%" nowhere EVALUATE_BUFFER
			READ_ASCII 0x0 insert_data (BUFFER_LENGTH)
			SPRINT insert_data "%WNL%%insert_data%%WNL%"
		  BUT_ONLY
	  END
   END
   LPF UI_patch_object_master STR_VAR object object_type object_name_field type=insert_into insert_data END
END

DEFINE_PATCH_FUNCTION UI_patch_object_master//internal
    STR_VAR object=""
            object_type=""
            object_name_field="name"
            patch=""
            type=""
            insert_data=""
    RET object_data
    RET_ARRAY patch_output
BEGIN
    PATCH_IF INDEX ("[ <>=\+/*{}]" "%patch%")>=0 BEGIN
		LPF anon_define INT_VAR has_output=1 STR_VAR function="%patch%" RET patch=function SFO_anon_func_count END
    END
   SPRINT object_data ""
   SPRINT $patch_output("NULL") ""
   SET index=0
   WHILE index>=0 BEGIN
      SET index=INDEX_BUFFER ("%object_type%" index)
      PATCH_IF index>=0 BEGIN
          LPF find_parenthesis_range_localcopy STR_VAR left="{" right="}" index RET start end END
          PATCH_IF start<0 BEGIN
             SET index = "-1"
          END ELSE BEGIN
             READ_ASCII start+1 data (end - start - 1)
             SET change=0
             INNER_PATCH_SAVE data "%data%" BEGIN
                PATCH_IF ( INDEX_BUFFER (~%object_name_field%\( \|%TAB%\)*['"]%object%['"]~) > 0 || "%object%" STRING_EQUAL "") BEGIN
                   PATCH_MATCH "%type%" WITH
                   alter BEGIN
                       SET change=1
                       LPF "%patch%" END
                   END
                   analyze BEGIN
                      LPF "%patch%" RET_ARRAY patch_output END
                   END
                   insert_into BEGIN
                      SET change=1
                      SET end_here = BUFFER_LENGTH - 1
                      INSERT_BYTES end_here (STRING_LENGTH "%insert_data%")
                      WRITE_ASCIIE end_here "%insert_data%"
                   END
                   replace BEGIN
                       SET change=1
                       DELETE_BYTES 0x0 BUFFER_LENGTH
                       INSERT_BYTES 0x0 (STRING_LENGTH "%insert_data%")
                       WRITE_ASCIIE 0x0 "%insert_data%"
                   END
                   return BEGIN
                      READ_ASCII 0x0 object_data (BUFFER_LENGTH)
                   END
                   DEFAULT
                      PATCH_FAIL "internal error in UI_patch_object_master: undefined type %type%"
                   END
                END
             END
             PATCH_IF change BEGIN
                  READ_ASCII start+1 info_here (end - start - 1)
                  DELETE_BYTES (start+1) ((end - start) - 1)
                  INSERT_BYTES (start+1) (STRING_LENGTH "%data%")
                  WRITE_ASCIIE (start+1) "%data%"
             END
             PATCH_IF change BEGIN
                SET index="-1"
             END ELSE BEGIN
             SET index=start + STRING_LENGTH "%data%"+2
             END
          END
      END
   END
END

/*
document{UI_add_function}
{
Adds the contents of the file 'function' (optionally located at the SFO location given by location/locbase/path) immediately before the first function definition in the current file.
(Use to add functions to UI.menu - but 99% of the time it's better to define them in your own custom lua file.)
}
*/

DEFINE_PATCH_FUNCTION UI_add_function
   STR_VAR function=""
			location=""
			locbase=""
			path=""
BEGIN
   INNER_ACTION BEGIN
      ACTION_IF "%location%%locbase%%path%" STR_CMP "" BEGIN
		LAF sfo_path STR_VAR file="%function%" location locbase path RET function=file_path END
	  END
      COPY - "%function%" nowhere EVALUATE_BUFFER
           READ_ASCII 0x0 function_data (BUFFER_LENGTH)
           SPRINT function_data "%WNL%%function_data%%WNL%"
      BUT_ONLY
   END
   SET insert_point = INDEX_BUFFER ("function ")
   INSERT_BYTES insert_point STRING_LENGTH "%function_data%"
   WRITE_ASCIIE insert_point "%function_data%"

END

/*
document{UI_add_string}
{
Add a string to the lua string file appropriate for the current game language (e.g., L_EN_US.lua if you're playing in English). 'string_id' is the lua string ID for the string; you can specify the string either via the INT_VAR tra_entry (an entry in your current .tra file) or directly as the STR_VAR 'string'.)
}
*/

DEFINE_ACTION_FUNCTION UI_add_string
    INT_VAR tra_entry=0
    STR_VAR string_id=""
            string=""
BEGIN
   ACTION_IF "%string%" STRING_EQUAL "" BEGIN
       OUTER_SPRINT string (AT tra_entry)
   END
   COPY_EXISTING "L_%EE_LANGUAGE%.lua" override
        REPLACE_TEXTUALLY ~uiStrings *= *{~ ~uiStrings = {%WNL%    %string_id% = "%string%",~
   BUT_ONLY
END

/*
document{UI_get_coordinates}
{
Look through the current file for the coordinates of an object (specified by four integers separated by spaces) and/or a bam file (specified by 'BAM [whatever]'). Return them in an array with keys bam, xloc, yloc, width, height.
(Use in conjuction with UI_analyze_object).
}
*/

DEFINE_PATCH_FUNCTION UI_get_coordinates
        RET_ARRAY patch_output
BEGIN
              REPLACE_EVALUATE "bam\(%WNL%\|%LNL%\|%MNL%\|%TAB%\| \)+\([^\(%WNL%\|%LNL%\|%MNL%\|%TAB%\| \)]*\)\(%WNL%\|%LNL%\|%MNL%\)" BEGIN
                SPRINT $patch_output("bam") "%MATCH2%"
              END
              "bam %MATCH2%%WNL%"
              REPLACE_EVALUATE "[^0-9]*\([0-9]+\)\( \|%TAB%\)+\([0-9]+\)\( \|%TAB%\)+\([0-9]+\)\( \|%TAB%\)+\([0-9]+\)[^0-9]*"
              BEGIN
                SET $patch_output("xloc")="%MATCH1%"
                SET $patch_output("yloc")="%MATCH3%"
                SET $patch_output("width")="%MATCH5%"
                SET $patch_output("height")="%MATCH7%"
              END
              ""

END

/*
document{UI_alter_function}
{
Find the lua function 'function' in the current file. Extract it, apply the patch function 'patch' to it (you can use the anonymous function construct) and put it back.</p>

<p>Note that the heuristic used to find the function is fairly crude: it assumes that the function finishes at the first 'end' that starts a new line. (This matches most, but not quite all,
functions in ui.menu.)
}
*/

DEFINE_PATCH_FUNCTION UI_alter_function
	STR_VAR function=""
			patch=""//function
BEGIN
		start=INDEX_BUFFER ("function %function%([^)]*)")
		end=INDEX_BUFFER ("[%WNL%%LNL%%MNL%]end" start)
		length_old=end + 4 - start
		PATCH_IF start<0 BEGIN
			PATCH_WARN "Unable to find function %function%() for patching"
		END ELSE BEGIN
			READ_ASCII start data (length_old)
			PATCH_IF INDEX ("[ <>=\+/*{}]" "%patch%")>=0 BEGIN
				 LPF anon_define INT_VAR has_output=1 STR_VAR function="%patch%" RET patch=function SFO_anon_func_count END
			END
			INNER_PATCH_SAVE new_data "%data%" BEGIN
				LPF "%patch%" END
				length_new=BUFFER_LENGTH
			END
			DELETE_BYTES start length_old
			INSERT_BYTES start length_new
			WRITE_ASCIIE start "%new_data%"
		END
END

/*
document{UI_replace_function}
{
Find the lua function 'function' in the current file. Replace it with the contents of the file at 'new_function' (legacy synonym: new_function_path), optionally located at the location specified SFO-style by location/locbase/path (or inline if inline=1.</p>

<p>Note that the heuristic used to find the function is fairly crude: it assumes that the function finishes at the first 'end' that starts a new line. (This matches most, but not quite all,
functions in ui.menu.)
}
*/

DEFINE_PATCH_FUNCTION UI_replace_function
	INT_VAR inline=0//boolean
	STR_VAR function=""
			new_function=""
			new_function_path=""
			location=""
			locbase=""
			path=""
BEGIN
	INNER_ACTION BEGIN
		OUTER_SPRINT new_function "%new_function%%new_function_path%"
		ACTION_IF "%location%%locbase%%path%" STR_CMP "" BEGIN
			LAF sfo_path STR_VAR location locbase path file="%new_function%" RET new_function=file_path END
		END
		ACTION_IF inline || FILE_EXISTS "%new_function%" BEGIN
		  COPY - "%new_function%" nowhere
			READ_ASCII 0x0 new_data (BUFFER_LENGTH)
			SET length_new=STRING_LENGTH "%new_data%"
			SET proceed=1
		  BUT_ONLY
		 END ELSE BEGIN
			WARN "Unable to swap out function %function%: no file found at %new_function%"
			OUTER_SET proceed=0
		 END
	END
	PATCH_IF proceed BEGIN
		start=INDEX_BUFFER ("function %function%([^)]*)")
		end=INDEX_BUFFER ("[%WNL%%LNL%%MNL%]end" start)
		length_old=end + 4 - start
		PATCH_IF start<0 BEGIN
			PATCH_WARN "Unable to find function %function%() for patching"
		END ELSE BEGIN
			READ_ASCII start data (length_old)
			DELETE_BYTES start length_old
			INSERT_BYTES start length_new
			WRITE_ASCIIE start "%new_data%"
		END
	END
END

/*
document{UI_install_function}
{
Add the contents of the file at 'new_function' (legacy synonym: new_function_path), optionally located at the location specified SFO-style by location/locbase/path (or inline if inline=1), to the end of the in-game lua file 'lua_file', creating it if necessary. If 'search_string' is set, only add the function if that string is not present in the lua already.</p>
}
*/

DEFINE_ACTION_FUNCTION UI_install_function
	INT_VAR inline=0//boolean
	STR_VAR lua_file=""
			new_function=""
			new_function_path=""
			location=""
			locbase=""
			path=""
			search_string=""
BEGIN
	OUTER_SPRINT new_function "%new_function%%new_function_path%"
	ACTION_IF "%location%%locbase%%path%" STR_CMP "" BEGIN
		LAF sfo_path STR_VAR location locbase path file="%new_function%" RET new_function=file_path END
	END
	ACTION_IF inline || FILE_EXISTS "%new_function%" BEGIN
	  COPY - "%new_function%" nowhere
		READ_ASCII 0x0 new_data (BUFFER_LENGTH)
		SET length_new=STRING_LENGTH "%new_data%"
		SET proceed=1
	  BUT_ONLY
	 END ELSE BEGIN
		WARN "Unable to install function at %new_function%: no file found at %new_function%"
		OUTER_SET proceed=0
	 END


	ACTION_IF !FILE_EXISTS_IN_GAME "%lua_file%.lua" BEGIN
		COPY "%new_function%" "override/%lua_file%.lua"
	END ELSE BEGIN
		COPY_EXISTING "%lua_file%.lua" override
		ACTION_IF "%search_string%" STR_EQ "" || !FILE_CONTAINS "override/%lua_file%.lua" "%search_string%" BEGIN
			COPY_EXISTING "%lua_file%.lua" override
				APPEND_FILE TEXT "%new_function%" EVALUATE_BUFFER
		END

	END
END



DEFINE_PATCH_FUNCTION find_parenthesis_range_localcopy//internal
     STR_VAR left="{"
             right="}"
             index=0
     RET     start
             end
BEGIN
     SET next_right="-1"
     SET start=INDEX_BUFFER("%left%" index)
     PATCH_IF start>=0 BEGIN
        SET indent=1
        SET loc=start + 1
        WHILE indent>0 BEGIN
           SET next_left = INDEX_BUFFER ("%left%" loc)
           SET next_right = INDEX_BUFFER ("%right%" loc)
           PATCH_IF next_right<0 BEGIN
              SET indent=0
              PATCH_WARN "Failed to properly extract next %left%---%right% section from file %SOURCE_RES%, starting at %index%"
           END ELSE
           PATCH_IF next_left<0 BEGIN
              SET indent -=1
              SET loc=next_right + 1
           END ELSE
           PATCH_IF (next_left<next_right && next_left>=0) BEGIN
              SET indent +=1
              SET loc=next_left + 1
           END ELSE BEGIN
              SET indent -=1
              SET loc=next_right + 1
           END
        END
        SET end=next_right
     END ELSE BEGIN
		end="-1"
	 END
END
