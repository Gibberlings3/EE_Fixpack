/////                                                  \\\\\
///// ALTER_STORE_ITEM                                 \\\\\
/////                                                  \\\\\

/*

while bg2 and iwd2 store formats differ, the item count/offset are in the same place
and the individual item listings are identical

used:
  bg2fixpack, as bg2fixpack/lib/alter_store_item.tpa [symbolic link]
  IWD2 Ease of Use, as iwd2-ease/lib/alter_store_item.tpa [symbolic link]

platform:
  all games except pst (v1.1 STO)

version history:
  unknown

*/

DEFINE_PATCH_FUNCTION alter_store_item

  // defines what we're going to check
  INT_VAR expiry           = "-1"
          charge1          = "-1"
          charge2          = "-1"
          charge3          = "-1"
          flags            = "-1"
          flag_identified  = "-1"
          flag_unstealable = "-1"
          flag_stolen      = "-1"
          flag_undroppable = "-1"
          stock            = "-1"
          infinite         = "-1"
          match_expiry     = "-1"
          match_charge1    = "-1"
          match_charge2    = "-1"
          match_charge3    = "-1"
          match_flags      = "-1"
          match_stock      = "-1"
          match_infinite   = "-1"
  STR_VAR item       = "same"
          match_item = "same"

BEGIN

  READ_LONG 0x34 item_off
  READ_LONG 0x38 item_num
  FOR (index = 0 ; index < item_num ; ++index) BEGIN
    SET base = (item_off + (index * 0x1c))
    READ_ASCII (base       ) o_item
    READ_SHORT (base + 0x08) o_expiry
    READ_SHORT (base + 0x0a) o_charge1
    READ_SHORT (base + 0x0c) o_charge2
    READ_SHORT (base + 0x0e) o_charge3
    READ_LONG  (base + 0x10) o_flags
    READ_LONG  (base + 0x14) o_stock
    READ_LONG  (base + 0x18) o_infinite

    PATCH_IF ((("%o_item%" STRING_COMPARE_CASE "%match_item%" = 0) OR
              ("all"      STRING_COMPARE_CASE "%match_item%" = 0)) AND
              ((match_expiry < 0)   OR (match_expiry = o_expiry))    AND
              ((match_charge1 < 0)  OR (match_charge1 = o_charge1))  AND
              ((match_charge2 < 0)  OR (match_charge2 = o_charge2))  AND
              ((match_charge3 < 0)  OR (match_charge3 = o_charge3))  AND
              ((match_flags < 0)    OR (match_flags = o_flags))      AND
              ((match_stock < 0)    OR (match_stock = o_stock))      AND
              ((match_infinite < 0) OR (match_infinite = o_infinite))) BEGIN
      PATCH_IF (expiry >= 0)   BEGIN WRITE_SHORT (base + 0x08) expiry   END
      PATCH_IF (charge1 >= 0)  BEGIN WRITE_SHORT (base + 0x0a) charge1  END
      PATCH_IF (charge2 >= 0)  BEGIN WRITE_SHORT (base + 0x0c) charge2  END
      PATCH_IF (charge3 >= 0)  BEGIN WRITE_SHORT (base + 0x0e) charge3  END
      PATCH_IF (stock >= 0)    BEGIN WRITE_LONG  (base + 0x14) stock    END
      PATCH_IF (infinite >= 0) BEGIN WRITE_LONG  (base + 0x18) infinite END
      PATCH_IF (flags >= 0)   BEGIN
        WRITE_LONG (base + 0x10) flags
      END ELSE BEGIN // only check individual flags if overall value not given
        PATCH_IF (flag_identified = 0)  BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT0) END
        PATCH_IF (flag_identified = 1)  BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT0) END
        PATCH_IF (flag_unstealable = 0) BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT1) END
        PATCH_IF (flag_unstealable = 1) BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT1) END
        PATCH_IF (flag_stolen = 0)      BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT2) END
        PATCH_IF (flag_stolen = 1)      BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT2) END
        PATCH_IF (flag_undroppable = 0) BEGIN WRITE_LONG  (base + 0x10) (THIS & `BIT3) END
        PATCH_IF (flag_undroppable = 1) BEGIN WRITE_LONG  (base + 0x10) (THIS BOR BIT3) END
      END
      PATCH_IF ("%item%" STRING_COMPARE_CASE "same") BEGIN
        WRITE_ASCIIE base ~%item%~ #8
      END
    END
  END

END
