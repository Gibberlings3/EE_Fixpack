/*
Similar to cd_tlk.tph, this is a tool to leverage the most recent updates from the Beamdog
translation tool. In the tool these are known as the Infinity Strings (IS), and they manifest
in game in the per-language LUA files, e.g. l_en_us.lua. These string are used for common UI
and/or help strings across games (save PsTEE) and cntralized so that the translation teams
would only have to do one translation instead of three.

While IS can be exported as a TLK file like the other string databases, the problem is that
the The TLK comparator couldn't be used. The IS database is set up a bit weird in that it
re-uses the sound field as the key for building the LUA file--however TLKs only allow an
8-byte field, so a key like ASSIGN_KEYS_PAGE_PRIESTSPELLS gets truncated to "ASSIGN_K".
This renders them non-unique and therefore useless for comparison.

Instead we use the other export option available, CSV. Unlike the TLK comparator which uses
external TLKs for both the compare-from and compare-to, this tool will compare the external
CSV vs. the game's actual working LUA file (this is also why the component is excluded from
running on PSTEE). The LUA files should (in theory) be identical across BGEE, SoD, BG2EE,
and IWDEE--after all this is the whole point of centralizing these strings.

The output is an array, infnity.tph, which can then be dropped into the appropriate
language folder, and for which the GTU now checks. A corresponding library,
cd_infinity_processing.tph, handles loading the array and making the actual updates.

Initial iteration 10.26.2022
  - initial coding, passing results to Cahir to see what can be improved

*/

/////                                                  \\\\\
///// cd_tlk_comparator                                \\\\\
/////                                                  \\\\\

// this function process a tra file into string_sets based on the tra reference, e.g. @123 is used as STRING_SET 123 @123
// this function creates headers and does basic duration extensions to level 30; written for inwd-in-bg2 ages ago
DEFINE_ACTION_FUNCTION cd_infinity_comparator
  STR_VAR lang      = ~~         // male/sole tlk that ships with 2.6 (full path with extension)
          lang_path = ~eefixpack/tlk~         // male/sole tlk that ships with 2.6 (full path with extension)
BEGIN

PRINT ~running~

  ACTION_IF ((!FILE_EXISTS ~%lang_path%/%lang%.csv~) OR (!FILE_EXISTS_IN_GAME ~l_%lang%.lua~)) BEGIN
    FAIL ~one of the required files not found~
  END

  MKDIR ~weidu_external/eefixpack/infinity_temp~

<<<<<<<<./inline/output.tph
// this file has been automatically generated by SECRET COMPONENT 997
ACTION_DEFINE_ASSOCIATIVE_ARRAY cd_update_infinity_strings BEGIN
>>>>>>>>

  COPY ~./inline/output.tph~ ~weidu_external/eefixpack/infinity_temp/cd_infinity_%lang%.tph~

  COPY_EXISTING ~l_%lang%.lua~ ~weidu_external/eefixpack/infinity_temp/l_%lang%.lua~
    REPLACE_EVALUATE ~^[ %TAB%]*\([A-Z_0-9]+\)[ %TAB%]*=[ %TAB%]*"\(.+\)",~ BEGIN
      SPRINT $cd_infinity("%MATCH1%") ~%MATCH2%~
    END ~~
    BUT_ONLY

  COPY_EXISTING ~%lang_path%/%lang%.csv~ ~weidu_external/eefixpack/infinity_temp/%lang%.csv~
    REPLACE_EVALUATE ~^"[0-9]+","\(.+\)","\([A-Z_0-9]+\)","[0-9]+","[0-9]+"~ BEGIN
      PATCH_IF !VARIABLE_IS_SET $cd_infinity("%MATCH2%") BEGIN
        INNER_ACTION BEGIN
          APPEND_OUTER ~weidu_external/eefixpack/infinity_temp/cd_infinity_%lang%.tph~ "  ~%MATCH2%~ => ~%MATCH1%~ /* this was not found in the LUA */"
        END
      END ELSE BEGIN
        SPRINT lua_comp $cd_infinity("%MATCH2%")
        PATCH_IF ("%lua_comp%" STRING_COMPARE ~%MATCH1%~) BEGIN
          INNER_ACTION BEGIN
            APPEND_OUTER ~weidu_external/eefixpack/infinity_temp/cd_infinity_%lang%.tph~ "  ~%MATCH2%~ => ~%MATCH1%~ /* this did not match the LUA string: ~%lua_comp%~ */"
          END
        END
      END
    END ~~
    BUT_ONLY

  APPEND_OUTER ~weidu_external/eefixpack/infinity_temp/cd_infinity_%lang%.tph~ ~END~

  COPY + ~weidu_external/eefixpack/infinity_temp/cd_infinity_%lang%.tph~ ~eefixpack/infinity.tph~

END
